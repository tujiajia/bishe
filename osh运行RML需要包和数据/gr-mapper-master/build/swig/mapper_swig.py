# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_mapper_swig')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_mapper_swig')
    _mapper_swig = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_mapper_swig', [dirname(__file__)])
        except ImportError:
            import _mapper_swig
            return _mapper_swig
        try:
            _mod = imp.load_module('_mapper_swig', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _mapper_swig = swig_import_helper()
    del swig_import_helper
else:
    import _mapper_swig
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now():
    """high_res_timer_now() -> gr::high_res_timer_type"""
    return _mapper_swig.high_res_timer_now()

def high_res_timer_now_perfmon():
    """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
    return _mapper_swig.high_res_timer_now_perfmon()

def high_res_timer_tps():
    """high_res_timer_tps() -> gr::high_res_timer_type"""
    return _mapper_swig.high_res_timer_tps()

def high_res_timer_epoch():
    """high_res_timer_epoch() -> gr::high_res_timer_type"""
    return _mapper_swig.high_res_timer_epoch()
class preamble_generator(object):
    """Proxy of C++ gr::mapper::preamble_generator class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(gr::mapper::preamble_generator self) -> preamble_generator
        __init__(gr::mapper::preamble_generator self, int N, int seed, int mask) -> preamble_generator
        """
        this = _mapper_swig.new_preamble_generator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mapper_swig.delete_preamble_generator
    __del__ = lambda self: None

    def clone(self):
        """clone(preamble_generator self) -> preamble_generator"""
        return _mapper_swig.preamble_generator_clone(self)


    def get_preamble(self):
        """get_preamble(preamble_generator self) -> std::vector< int,std::allocator< int > >"""
        return _mapper_swig.preamble_generator_get_preamble(self)

preamble_generator_swigregister = _mapper_swig.preamble_generator_swigregister
preamble_generator_swigregister(preamble_generator)

BPSK = _mapper_swig.BPSK
P2BPSK = _mapper_swig.P2BPSK
QPSK = _mapper_swig.QPSK
PSK8 = _mapper_swig.PSK8
PAM4 = _mapper_swig.PAM4
QAM16 = _mapper_swig.QAM16
QAM64 = _mapper_swig.QAM64
class constellation(object):
    """Proxy of C++ gr::mapper::constellation class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        """__init__(gr::mapper::constellation self, gr::mapper::modtype_t modtype, std::vector< int,std::allocator< int > > symbol_values, gr_complex scalar) -> constellation"""
        this = _mapper_swig.new_constellation(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def map(self, *args):
        """
        map(constellation self, uint8_t const * _in, gr_complex * out, int nsymbols, uint16_t mapidx=0)
        map(constellation self, float const * _in, gr_complex * out, int nsymbols, uint16_t mapidx=0)

        Apply  element-wise to the elements of list and returns a list of the results, in order.

        must be a list. The dynamic order in which  is applied to the elements of  is unspecified.
        """
        return _mapper_swig.constellation_map(self, *args)


    def demap_hard(self, _in, out, nsymbols):
        """demap_hard(constellation self, gr_complex const * _in, uint8_t * out, int nsymbols)"""
        return _mapper_swig.constellation_demap_hard(self, _in, out, nsymbols)


    def demap_soft(self, _in, out, nsymbols):
        """demap_soft(constellation self, gr_complex const * _in, float * out, int nsymbols)"""
        return _mapper_swig.constellation_demap_soft(self, _in, out, nsymbols)


    def bps(self):
        """bps(constellation self) -> int"""
        return _mapper_swig.constellation_bps(self)


    def nmaps(self):
        """nmaps(constellation self) -> int"""
        return _mapper_swig.constellation_nmaps(self)

    __swig_destroy__ = _mapper_swig.delete_constellation
    __del__ = lambda self: None
constellation_swigregister = _mapper_swig.constellation_swigregister
constellation_swigregister(constellation)
cvar = _mapper_swig.cvar
default_greymap_bpsk = cvar.default_greymap_bpsk
default_greymap_qpsk = cvar.default_greymap_qpsk
default_greymap_psk8 = cvar.default_greymap_psk8
default_greymap_pam4 = cvar.default_greymap_pam4
default_greymap_qam16 = cvar.default_greymap_qam16
default_greymap_qam64 = cvar.default_greymap_qam64

class mapper(object):
    """Proxy of C++ gr::mapper::mapper class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(modtype, symbol_values):
        """make(gr::mapper::modtype_t modtype, std::vector< int,std::allocator< int > > symbol_values) -> mapper_sptr"""
        return _mapper_swig.mapper_make(modtype, symbol_values)

    make = staticmethod(make)
    __swig_destroy__ = _mapper_swig.delete_mapper
    __del__ = lambda self: None
mapper_swigregister = _mapper_swig.mapper_swigregister
mapper_swigregister(mapper)

def mapper_make(modtype, symbol_values):
    """mapper_make(gr::mapper::modtype_t modtype, std::vector< int,std::allocator< int > > symbol_values) -> mapper_sptr"""
    return _mapper_swig.mapper_make(modtype, symbol_values)

class mapper_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::mapper::mapper)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::mapper::mapper)> self) -> mapper_sptr
        __init__(boost::shared_ptr<(gr::mapper::mapper)> self, mapper p) -> mapper_sptr
        """
        this = _mapper_swig.new_mapper_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(mapper_sptr self) -> mapper"""
        return _mapper_swig.mapper_sptr___deref__(self)

    __swig_destroy__ = _mapper_swig.delete_mapper_sptr
    __del__ = lambda self: None

    def make(self, modtype, symbol_values):
        """make(mapper_sptr self, gr::mapper::modtype_t modtype, std::vector< int,std::allocator< int > > symbol_values) -> mapper_sptr"""
        return _mapper_swig.mapper_sptr_make(self, modtype, symbol_values)


    def history(self):
        """history(mapper_sptr self) -> unsigned int"""
        return _mapper_swig.mapper_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(mapper_sptr self, int which, int delay)
        declare_sample_delay(mapper_sptr self, unsigned int delay)
        """
        return _mapper_swig.mapper_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(mapper_sptr self, int which) -> unsigned int"""
        return _mapper_swig.mapper_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(mapper_sptr self) -> int"""
        return _mapper_swig.mapper_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(mapper_sptr self) -> double"""
        return _mapper_swig.mapper_sptr_relative_rate(self)


    def start(self):
        """start(mapper_sptr self) -> bool"""
        return _mapper_swig.mapper_sptr_start(self)


    def stop(self):
        """stop(mapper_sptr self) -> bool"""
        return _mapper_swig.mapper_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(mapper_sptr self, unsigned int which_input) -> uint64_t"""
        return _mapper_swig.mapper_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(mapper_sptr self, unsigned int which_output) -> uint64_t"""
        return _mapper_swig.mapper_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(mapper_sptr self) -> int"""
        return _mapper_swig.mapper_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(mapper_sptr self, int m)"""
        return _mapper_swig.mapper_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(mapper_sptr self)"""
        return _mapper_swig.mapper_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(mapper_sptr self) -> bool"""
        return _mapper_swig.mapper_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(mapper_sptr self, int m)"""
        return _mapper_swig.mapper_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(mapper_sptr self) -> int"""
        return _mapper_swig.mapper_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(mapper_sptr self, int i) -> long"""
        return _mapper_swig.mapper_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(mapper_sptr self, long max_output_buffer)
        set_max_output_buffer(mapper_sptr self, int port, long max_output_buffer)
        """
        return _mapper_swig.mapper_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(mapper_sptr self, int i) -> long"""
        return _mapper_swig.mapper_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(mapper_sptr self, long min_output_buffer)
        set_min_output_buffer(mapper_sptr self, int port, long min_output_buffer)
        """
        return _mapper_swig.mapper_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(mapper_sptr self) -> float"""
        return _mapper_swig.mapper_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(mapper_sptr self) -> float"""
        return _mapper_swig.mapper_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(mapper_sptr self) -> float"""
        return _mapper_swig.mapper_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(mapper_sptr self) -> float"""
        return _mapper_swig.mapper_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(mapper_sptr self) -> float"""
        return _mapper_swig.mapper_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(mapper_sptr self) -> float"""
        return _mapper_swig.mapper_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(mapper_sptr self, int which) -> float
        pc_input_buffers_full(mapper_sptr self) -> pmt_vector_float
        """
        return _mapper_swig.mapper_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(mapper_sptr self, int which) -> float
        pc_input_buffers_full_avg(mapper_sptr self) -> pmt_vector_float
        """
        return _mapper_swig.mapper_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(mapper_sptr self, int which) -> float
        pc_input_buffers_full_var(mapper_sptr self) -> pmt_vector_float
        """
        return _mapper_swig.mapper_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(mapper_sptr self, int which) -> float
        pc_output_buffers_full(mapper_sptr self) -> pmt_vector_float
        """
        return _mapper_swig.mapper_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(mapper_sptr self, int which) -> float
        pc_output_buffers_full_avg(mapper_sptr self) -> pmt_vector_float
        """
        return _mapper_swig.mapper_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(mapper_sptr self, int which) -> float
        pc_output_buffers_full_var(mapper_sptr self) -> pmt_vector_float
        """
        return _mapper_swig.mapper_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(mapper_sptr self) -> float"""
        return _mapper_swig.mapper_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(mapper_sptr self) -> float"""
        return _mapper_swig.mapper_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(mapper_sptr self) -> float"""
        return _mapper_swig.mapper_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(mapper_sptr self) -> float"""
        return _mapper_swig.mapper_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(mapper_sptr self) -> float"""
        return _mapper_swig.mapper_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(mapper_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _mapper_swig.mapper_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(mapper_sptr self)"""
        return _mapper_swig.mapper_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(mapper_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _mapper_swig.mapper_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(mapper_sptr self) -> int"""
        return _mapper_swig.mapper_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(mapper_sptr self) -> int"""
        return _mapper_swig.mapper_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(mapper_sptr self, int priority) -> int"""
        return _mapper_swig.mapper_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(mapper_sptr self) -> std::string"""
        return _mapper_swig.mapper_sptr_name(self)


    def symbol_name(self):
        """symbol_name(mapper_sptr self) -> std::string"""
        return _mapper_swig.mapper_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(mapper_sptr self) -> io_signature_sptr"""
        return _mapper_swig.mapper_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(mapper_sptr self) -> io_signature_sptr"""
        return _mapper_swig.mapper_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(mapper_sptr self) -> long"""
        return _mapper_swig.mapper_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(mapper_sptr self) -> basic_block_sptr"""
        return _mapper_swig.mapper_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(mapper_sptr self, int ninputs, int noutputs) -> bool"""
        return _mapper_swig.mapper_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(mapper_sptr self) -> std::string"""
        return _mapper_swig.mapper_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(mapper_sptr self, std::string name)"""
        return _mapper_swig.mapper_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(mapper_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _mapper_swig.mapper_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(mapper_sptr self) -> swig_int_ptr"""
        return _mapper_swig.mapper_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(mapper_sptr self) -> swig_int_ptr"""
        return _mapper_swig.mapper_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(mapper_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _mapper_swig.mapper_sptr_message_subscribers(self, which_port)

mapper_sptr_swigregister = _mapper_swig.mapper_sptr_swigregister
mapper_sptr_swigregister(mapper_sptr)


mapper_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
mapper = mapper.make;

class demapper(object):
    """Proxy of C++ gr::mapper::demapper class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(modtype, symbol_values):
        """make(gr::mapper::modtype_t modtype, std::vector< int,std::allocator< int > > symbol_values) -> demapper_sptr"""
        return _mapper_swig.demapper_make(modtype, symbol_values)

    make = staticmethod(make)
    __swig_destroy__ = _mapper_swig.delete_demapper
    __del__ = lambda self: None
demapper_swigregister = _mapper_swig.demapper_swigregister
demapper_swigregister(demapper)

def demapper_make(modtype, symbol_values):
    """demapper_make(gr::mapper::modtype_t modtype, std::vector< int,std::allocator< int > > symbol_values) -> demapper_sptr"""
    return _mapper_swig.demapper_make(modtype, symbol_values)

class demapper_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::mapper::demapper)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::mapper::demapper)> self) -> demapper_sptr
        __init__(boost::shared_ptr<(gr::mapper::demapper)> self, demapper p) -> demapper_sptr
        """
        this = _mapper_swig.new_demapper_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(demapper_sptr self) -> demapper"""
        return _mapper_swig.demapper_sptr___deref__(self)

    __swig_destroy__ = _mapper_swig.delete_demapper_sptr
    __del__ = lambda self: None

    def make(self, modtype, symbol_values):
        """make(demapper_sptr self, gr::mapper::modtype_t modtype, std::vector< int,std::allocator< int > > symbol_values) -> demapper_sptr"""
        return _mapper_swig.demapper_sptr_make(self, modtype, symbol_values)


    def history(self):
        """history(demapper_sptr self) -> unsigned int"""
        return _mapper_swig.demapper_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(demapper_sptr self, int which, int delay)
        declare_sample_delay(demapper_sptr self, unsigned int delay)
        """
        return _mapper_swig.demapper_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(demapper_sptr self, int which) -> unsigned int"""
        return _mapper_swig.demapper_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(demapper_sptr self) -> int"""
        return _mapper_swig.demapper_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(demapper_sptr self) -> double"""
        return _mapper_swig.demapper_sptr_relative_rate(self)


    def start(self):
        """start(demapper_sptr self) -> bool"""
        return _mapper_swig.demapper_sptr_start(self)


    def stop(self):
        """stop(demapper_sptr self) -> bool"""
        return _mapper_swig.demapper_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(demapper_sptr self, unsigned int which_input) -> uint64_t"""
        return _mapper_swig.demapper_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(demapper_sptr self, unsigned int which_output) -> uint64_t"""
        return _mapper_swig.demapper_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(demapper_sptr self) -> int"""
        return _mapper_swig.demapper_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(demapper_sptr self, int m)"""
        return _mapper_swig.demapper_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(demapper_sptr self)"""
        return _mapper_swig.demapper_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(demapper_sptr self) -> bool"""
        return _mapper_swig.demapper_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(demapper_sptr self, int m)"""
        return _mapper_swig.demapper_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(demapper_sptr self) -> int"""
        return _mapper_swig.demapper_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(demapper_sptr self, int i) -> long"""
        return _mapper_swig.demapper_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(demapper_sptr self, long max_output_buffer)
        set_max_output_buffer(demapper_sptr self, int port, long max_output_buffer)
        """
        return _mapper_swig.demapper_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(demapper_sptr self, int i) -> long"""
        return _mapper_swig.demapper_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(demapper_sptr self, long min_output_buffer)
        set_min_output_buffer(demapper_sptr self, int port, long min_output_buffer)
        """
        return _mapper_swig.demapper_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(demapper_sptr self) -> float"""
        return _mapper_swig.demapper_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(demapper_sptr self) -> float"""
        return _mapper_swig.demapper_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(demapper_sptr self) -> float"""
        return _mapper_swig.demapper_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(demapper_sptr self) -> float"""
        return _mapper_swig.demapper_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(demapper_sptr self) -> float"""
        return _mapper_swig.demapper_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(demapper_sptr self) -> float"""
        return _mapper_swig.demapper_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(demapper_sptr self, int which) -> float
        pc_input_buffers_full(demapper_sptr self) -> pmt_vector_float
        """
        return _mapper_swig.demapper_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(demapper_sptr self, int which) -> float
        pc_input_buffers_full_avg(demapper_sptr self) -> pmt_vector_float
        """
        return _mapper_swig.demapper_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(demapper_sptr self, int which) -> float
        pc_input_buffers_full_var(demapper_sptr self) -> pmt_vector_float
        """
        return _mapper_swig.demapper_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(demapper_sptr self, int which) -> float
        pc_output_buffers_full(demapper_sptr self) -> pmt_vector_float
        """
        return _mapper_swig.demapper_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(demapper_sptr self, int which) -> float
        pc_output_buffers_full_avg(demapper_sptr self) -> pmt_vector_float
        """
        return _mapper_swig.demapper_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(demapper_sptr self, int which) -> float
        pc_output_buffers_full_var(demapper_sptr self) -> pmt_vector_float
        """
        return _mapper_swig.demapper_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(demapper_sptr self) -> float"""
        return _mapper_swig.demapper_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(demapper_sptr self) -> float"""
        return _mapper_swig.demapper_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(demapper_sptr self) -> float"""
        return _mapper_swig.demapper_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(demapper_sptr self) -> float"""
        return _mapper_swig.demapper_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(demapper_sptr self) -> float"""
        return _mapper_swig.demapper_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(demapper_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _mapper_swig.demapper_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(demapper_sptr self)"""
        return _mapper_swig.demapper_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(demapper_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _mapper_swig.demapper_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(demapper_sptr self) -> int"""
        return _mapper_swig.demapper_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(demapper_sptr self) -> int"""
        return _mapper_swig.demapper_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(demapper_sptr self, int priority) -> int"""
        return _mapper_swig.demapper_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(demapper_sptr self) -> std::string"""
        return _mapper_swig.demapper_sptr_name(self)


    def symbol_name(self):
        """symbol_name(demapper_sptr self) -> std::string"""
        return _mapper_swig.demapper_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(demapper_sptr self) -> io_signature_sptr"""
        return _mapper_swig.demapper_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(demapper_sptr self) -> io_signature_sptr"""
        return _mapper_swig.demapper_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(demapper_sptr self) -> long"""
        return _mapper_swig.demapper_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(demapper_sptr self) -> basic_block_sptr"""
        return _mapper_swig.demapper_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(demapper_sptr self, int ninputs, int noutputs) -> bool"""
        return _mapper_swig.demapper_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(demapper_sptr self) -> std::string"""
        return _mapper_swig.demapper_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(demapper_sptr self, std::string name)"""
        return _mapper_swig.demapper_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(demapper_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _mapper_swig.demapper_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(demapper_sptr self) -> swig_int_ptr"""
        return _mapper_swig.demapper_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(demapper_sptr self) -> swig_int_ptr"""
        return _mapper_swig.demapper_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(demapper_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _mapper_swig.demapper_sptr_message_subscribers(self, which_port)

demapper_sptr_swigregister = _mapper_swig.demapper_sptr_swigregister
demapper_sptr_swigregister(demapper_sptr)


demapper_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
demapper = demapper.make;

class demapper_soft(object):
    """Proxy of C++ gr::mapper::demapper_soft class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(modtype, symbol_values):
        """make(gr::mapper::modtype_t modtype, std::vector< int,std::allocator< int > > symbol_values) -> demapper_soft_sptr"""
        return _mapper_swig.demapper_soft_make(modtype, symbol_values)

    make = staticmethod(make)
    __swig_destroy__ = _mapper_swig.delete_demapper_soft
    __del__ = lambda self: None
demapper_soft_swigregister = _mapper_swig.demapper_soft_swigregister
demapper_soft_swigregister(demapper_soft)

def demapper_soft_make(modtype, symbol_values):
    """demapper_soft_make(gr::mapper::modtype_t modtype, std::vector< int,std::allocator< int > > symbol_values) -> demapper_soft_sptr"""
    return _mapper_swig.demapper_soft_make(modtype, symbol_values)

class demapper_soft_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::mapper::demapper_soft)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::mapper::demapper_soft)> self) -> demapper_soft_sptr
        __init__(boost::shared_ptr<(gr::mapper::demapper_soft)> self, demapper_soft p) -> demapper_soft_sptr
        """
        this = _mapper_swig.new_demapper_soft_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(demapper_soft_sptr self) -> demapper_soft"""
        return _mapper_swig.demapper_soft_sptr___deref__(self)

    __swig_destroy__ = _mapper_swig.delete_demapper_soft_sptr
    __del__ = lambda self: None

    def make(self, modtype, symbol_values):
        """make(demapper_soft_sptr self, gr::mapper::modtype_t modtype, std::vector< int,std::allocator< int > > symbol_values) -> demapper_soft_sptr"""
        return _mapper_swig.demapper_soft_sptr_make(self, modtype, symbol_values)


    def history(self):
        """history(demapper_soft_sptr self) -> unsigned int"""
        return _mapper_swig.demapper_soft_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(demapper_soft_sptr self, int which, int delay)
        declare_sample_delay(demapper_soft_sptr self, unsigned int delay)
        """
        return _mapper_swig.demapper_soft_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(demapper_soft_sptr self, int which) -> unsigned int"""
        return _mapper_swig.demapper_soft_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(demapper_soft_sptr self) -> int"""
        return _mapper_swig.demapper_soft_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(demapper_soft_sptr self) -> double"""
        return _mapper_swig.demapper_soft_sptr_relative_rate(self)


    def start(self):
        """start(demapper_soft_sptr self) -> bool"""
        return _mapper_swig.demapper_soft_sptr_start(self)


    def stop(self):
        """stop(demapper_soft_sptr self) -> bool"""
        return _mapper_swig.demapper_soft_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(demapper_soft_sptr self, unsigned int which_input) -> uint64_t"""
        return _mapper_swig.demapper_soft_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(demapper_soft_sptr self, unsigned int which_output) -> uint64_t"""
        return _mapper_swig.demapper_soft_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(demapper_soft_sptr self) -> int"""
        return _mapper_swig.demapper_soft_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(demapper_soft_sptr self, int m)"""
        return _mapper_swig.demapper_soft_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(demapper_soft_sptr self)"""
        return _mapper_swig.demapper_soft_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(demapper_soft_sptr self) -> bool"""
        return _mapper_swig.demapper_soft_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(demapper_soft_sptr self, int m)"""
        return _mapper_swig.demapper_soft_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(demapper_soft_sptr self) -> int"""
        return _mapper_swig.demapper_soft_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(demapper_soft_sptr self, int i) -> long"""
        return _mapper_swig.demapper_soft_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(demapper_soft_sptr self, long max_output_buffer)
        set_max_output_buffer(demapper_soft_sptr self, int port, long max_output_buffer)
        """
        return _mapper_swig.demapper_soft_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(demapper_soft_sptr self, int i) -> long"""
        return _mapper_swig.demapper_soft_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(demapper_soft_sptr self, long min_output_buffer)
        set_min_output_buffer(demapper_soft_sptr self, int port, long min_output_buffer)
        """
        return _mapper_swig.demapper_soft_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(demapper_soft_sptr self) -> float"""
        return _mapper_swig.demapper_soft_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(demapper_soft_sptr self) -> float"""
        return _mapper_swig.demapper_soft_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(demapper_soft_sptr self) -> float"""
        return _mapper_swig.demapper_soft_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(demapper_soft_sptr self) -> float"""
        return _mapper_swig.demapper_soft_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(demapper_soft_sptr self) -> float"""
        return _mapper_swig.demapper_soft_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(demapper_soft_sptr self) -> float"""
        return _mapper_swig.demapper_soft_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(demapper_soft_sptr self, int which) -> float
        pc_input_buffers_full(demapper_soft_sptr self) -> pmt_vector_float
        """
        return _mapper_swig.demapper_soft_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(demapper_soft_sptr self, int which) -> float
        pc_input_buffers_full_avg(demapper_soft_sptr self) -> pmt_vector_float
        """
        return _mapper_swig.demapper_soft_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(demapper_soft_sptr self, int which) -> float
        pc_input_buffers_full_var(demapper_soft_sptr self) -> pmt_vector_float
        """
        return _mapper_swig.demapper_soft_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(demapper_soft_sptr self, int which) -> float
        pc_output_buffers_full(demapper_soft_sptr self) -> pmt_vector_float
        """
        return _mapper_swig.demapper_soft_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(demapper_soft_sptr self, int which) -> float
        pc_output_buffers_full_avg(demapper_soft_sptr self) -> pmt_vector_float
        """
        return _mapper_swig.demapper_soft_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(demapper_soft_sptr self, int which) -> float
        pc_output_buffers_full_var(demapper_soft_sptr self) -> pmt_vector_float
        """
        return _mapper_swig.demapper_soft_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(demapper_soft_sptr self) -> float"""
        return _mapper_swig.demapper_soft_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(demapper_soft_sptr self) -> float"""
        return _mapper_swig.demapper_soft_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(demapper_soft_sptr self) -> float"""
        return _mapper_swig.demapper_soft_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(demapper_soft_sptr self) -> float"""
        return _mapper_swig.demapper_soft_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(demapper_soft_sptr self) -> float"""
        return _mapper_swig.demapper_soft_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(demapper_soft_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _mapper_swig.demapper_soft_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(demapper_soft_sptr self)"""
        return _mapper_swig.demapper_soft_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(demapper_soft_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _mapper_swig.demapper_soft_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(demapper_soft_sptr self) -> int"""
        return _mapper_swig.demapper_soft_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(demapper_soft_sptr self) -> int"""
        return _mapper_swig.demapper_soft_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(demapper_soft_sptr self, int priority) -> int"""
        return _mapper_swig.demapper_soft_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(demapper_soft_sptr self) -> std::string"""
        return _mapper_swig.demapper_soft_sptr_name(self)


    def symbol_name(self):
        """symbol_name(demapper_soft_sptr self) -> std::string"""
        return _mapper_swig.demapper_soft_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(demapper_soft_sptr self) -> io_signature_sptr"""
        return _mapper_swig.demapper_soft_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(demapper_soft_sptr self) -> io_signature_sptr"""
        return _mapper_swig.demapper_soft_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(demapper_soft_sptr self) -> long"""
        return _mapper_swig.demapper_soft_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(demapper_soft_sptr self) -> basic_block_sptr"""
        return _mapper_swig.demapper_soft_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(demapper_soft_sptr self, int ninputs, int noutputs) -> bool"""
        return _mapper_swig.demapper_soft_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(demapper_soft_sptr self) -> std::string"""
        return _mapper_swig.demapper_soft_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(demapper_soft_sptr self, std::string name)"""
        return _mapper_swig.demapper_soft_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(demapper_soft_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _mapper_swig.demapper_soft_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(demapper_soft_sptr self) -> swig_int_ptr"""
        return _mapper_swig.demapper_soft_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(demapper_soft_sptr self) -> swig_int_ptr"""
        return _mapper_swig.demapper_soft_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(demapper_soft_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _mapper_swig.demapper_soft_sptr_message_subscribers(self, which_port)

demapper_soft_sptr_swigregister = _mapper_swig.demapper_soft_sptr_swigregister
demapper_soft_sptr_swigregister(demapper_soft_sptr)


demapper_soft_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
demapper_soft = demapper_soft.make;

class mapper_msg(object):
    """Proxy of C++ gr::mapper::mapper_msg class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(modtype, symbol_values):
        """make(gr::mapper::modtype_t modtype, std::vector< int,std::allocator< int > > symbol_values) -> mapper_msg_sptr"""
        return _mapper_swig.mapper_msg_make(modtype, symbol_values)

    make = staticmethod(make)
    __swig_destroy__ = _mapper_swig.delete_mapper_msg
    __del__ = lambda self: None
mapper_msg_swigregister = _mapper_swig.mapper_msg_swigregister
mapper_msg_swigregister(mapper_msg)

def mapper_msg_make(modtype, symbol_values):
    """mapper_msg_make(gr::mapper::modtype_t modtype, std::vector< int,std::allocator< int > > symbol_values) -> mapper_msg_sptr"""
    return _mapper_swig.mapper_msg_make(modtype, symbol_values)

class mapper_msg_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::mapper::mapper_msg)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::mapper::mapper_msg)> self) -> mapper_msg_sptr
        __init__(boost::shared_ptr<(gr::mapper::mapper_msg)> self, mapper_msg p) -> mapper_msg_sptr
        """
        this = _mapper_swig.new_mapper_msg_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(mapper_msg_sptr self) -> mapper_msg"""
        return _mapper_swig.mapper_msg_sptr___deref__(self)

    __swig_destroy__ = _mapper_swig.delete_mapper_msg_sptr
    __del__ = lambda self: None

    def make(self, modtype, symbol_values):
        """make(mapper_msg_sptr self, gr::mapper::modtype_t modtype, std::vector< int,std::allocator< int > > symbol_values) -> mapper_msg_sptr"""
        return _mapper_swig.mapper_msg_sptr_make(self, modtype, symbol_values)


    def history(self):
        """history(mapper_msg_sptr self) -> unsigned int"""
        return _mapper_swig.mapper_msg_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(mapper_msg_sptr self, int which, int delay)
        declare_sample_delay(mapper_msg_sptr self, unsigned int delay)
        """
        return _mapper_swig.mapper_msg_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(mapper_msg_sptr self, int which) -> unsigned int"""
        return _mapper_swig.mapper_msg_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(mapper_msg_sptr self) -> int"""
        return _mapper_swig.mapper_msg_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(mapper_msg_sptr self) -> double"""
        return _mapper_swig.mapper_msg_sptr_relative_rate(self)


    def start(self):
        """start(mapper_msg_sptr self) -> bool"""
        return _mapper_swig.mapper_msg_sptr_start(self)


    def stop(self):
        """stop(mapper_msg_sptr self) -> bool"""
        return _mapper_swig.mapper_msg_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(mapper_msg_sptr self, unsigned int which_input) -> uint64_t"""
        return _mapper_swig.mapper_msg_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(mapper_msg_sptr self, unsigned int which_output) -> uint64_t"""
        return _mapper_swig.mapper_msg_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(mapper_msg_sptr self) -> int"""
        return _mapper_swig.mapper_msg_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(mapper_msg_sptr self, int m)"""
        return _mapper_swig.mapper_msg_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(mapper_msg_sptr self)"""
        return _mapper_swig.mapper_msg_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(mapper_msg_sptr self) -> bool"""
        return _mapper_swig.mapper_msg_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(mapper_msg_sptr self, int m)"""
        return _mapper_swig.mapper_msg_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(mapper_msg_sptr self) -> int"""
        return _mapper_swig.mapper_msg_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(mapper_msg_sptr self, int i) -> long"""
        return _mapper_swig.mapper_msg_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(mapper_msg_sptr self, long max_output_buffer)
        set_max_output_buffer(mapper_msg_sptr self, int port, long max_output_buffer)
        """
        return _mapper_swig.mapper_msg_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(mapper_msg_sptr self, int i) -> long"""
        return _mapper_swig.mapper_msg_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(mapper_msg_sptr self, long min_output_buffer)
        set_min_output_buffer(mapper_msg_sptr self, int port, long min_output_buffer)
        """
        return _mapper_swig.mapper_msg_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(mapper_msg_sptr self) -> float"""
        return _mapper_swig.mapper_msg_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(mapper_msg_sptr self) -> float"""
        return _mapper_swig.mapper_msg_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(mapper_msg_sptr self) -> float"""
        return _mapper_swig.mapper_msg_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(mapper_msg_sptr self) -> float"""
        return _mapper_swig.mapper_msg_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(mapper_msg_sptr self) -> float"""
        return _mapper_swig.mapper_msg_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(mapper_msg_sptr self) -> float"""
        return _mapper_swig.mapper_msg_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(mapper_msg_sptr self, int which) -> float
        pc_input_buffers_full(mapper_msg_sptr self) -> pmt_vector_float
        """
        return _mapper_swig.mapper_msg_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(mapper_msg_sptr self, int which) -> float
        pc_input_buffers_full_avg(mapper_msg_sptr self) -> pmt_vector_float
        """
        return _mapper_swig.mapper_msg_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(mapper_msg_sptr self, int which) -> float
        pc_input_buffers_full_var(mapper_msg_sptr self) -> pmt_vector_float
        """
        return _mapper_swig.mapper_msg_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(mapper_msg_sptr self, int which) -> float
        pc_output_buffers_full(mapper_msg_sptr self) -> pmt_vector_float
        """
        return _mapper_swig.mapper_msg_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(mapper_msg_sptr self, int which) -> float
        pc_output_buffers_full_avg(mapper_msg_sptr self) -> pmt_vector_float
        """
        return _mapper_swig.mapper_msg_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(mapper_msg_sptr self, int which) -> float
        pc_output_buffers_full_var(mapper_msg_sptr self) -> pmt_vector_float
        """
        return _mapper_swig.mapper_msg_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(mapper_msg_sptr self) -> float"""
        return _mapper_swig.mapper_msg_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(mapper_msg_sptr self) -> float"""
        return _mapper_swig.mapper_msg_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(mapper_msg_sptr self) -> float"""
        return _mapper_swig.mapper_msg_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(mapper_msg_sptr self) -> float"""
        return _mapper_swig.mapper_msg_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(mapper_msg_sptr self) -> float"""
        return _mapper_swig.mapper_msg_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(mapper_msg_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _mapper_swig.mapper_msg_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(mapper_msg_sptr self)"""
        return _mapper_swig.mapper_msg_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(mapper_msg_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _mapper_swig.mapper_msg_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(mapper_msg_sptr self) -> int"""
        return _mapper_swig.mapper_msg_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(mapper_msg_sptr self) -> int"""
        return _mapper_swig.mapper_msg_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(mapper_msg_sptr self, int priority) -> int"""
        return _mapper_swig.mapper_msg_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(mapper_msg_sptr self) -> std::string"""
        return _mapper_swig.mapper_msg_sptr_name(self)


    def symbol_name(self):
        """symbol_name(mapper_msg_sptr self) -> std::string"""
        return _mapper_swig.mapper_msg_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(mapper_msg_sptr self) -> io_signature_sptr"""
        return _mapper_swig.mapper_msg_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(mapper_msg_sptr self) -> io_signature_sptr"""
        return _mapper_swig.mapper_msg_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(mapper_msg_sptr self) -> long"""
        return _mapper_swig.mapper_msg_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(mapper_msg_sptr self) -> basic_block_sptr"""
        return _mapper_swig.mapper_msg_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(mapper_msg_sptr self, int ninputs, int noutputs) -> bool"""
        return _mapper_swig.mapper_msg_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(mapper_msg_sptr self) -> std::string"""
        return _mapper_swig.mapper_msg_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(mapper_msg_sptr self, std::string name)"""
        return _mapper_swig.mapper_msg_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(mapper_msg_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _mapper_swig.mapper_msg_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(mapper_msg_sptr self) -> swig_int_ptr"""
        return _mapper_swig.mapper_msg_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(mapper_msg_sptr self) -> swig_int_ptr"""
        return _mapper_swig.mapper_msg_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(mapper_msg_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _mapper_swig.mapper_msg_sptr_message_subscribers(self, which_port)

mapper_msg_sptr_swigregister = _mapper_swig.mapper_msg_sptr_swigregister
mapper_msg_sptr_swigregister(mapper_msg_sptr)


mapper_msg_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
mapper_msg = mapper_msg.make;

class demapper_msg(object):
    """Proxy of C++ gr::mapper::demapper_msg class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(modtype, symbol_values):
        """make(gr::mapper::modtype_t modtype, std::vector< int,std::allocator< int > > symbol_values) -> demapper_msg_sptr"""
        return _mapper_swig.demapper_msg_make(modtype, symbol_values)

    make = staticmethod(make)
    __swig_destroy__ = _mapper_swig.delete_demapper_msg
    __del__ = lambda self: None
demapper_msg_swigregister = _mapper_swig.demapper_msg_swigregister
demapper_msg_swigregister(demapper_msg)

def demapper_msg_make(modtype, symbol_values):
    """demapper_msg_make(gr::mapper::modtype_t modtype, std::vector< int,std::allocator< int > > symbol_values) -> demapper_msg_sptr"""
    return _mapper_swig.demapper_msg_make(modtype, symbol_values)

class demapper_msg_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::mapper::demapper_msg)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::mapper::demapper_msg)> self) -> demapper_msg_sptr
        __init__(boost::shared_ptr<(gr::mapper::demapper_msg)> self, demapper_msg p) -> demapper_msg_sptr
        """
        this = _mapper_swig.new_demapper_msg_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(demapper_msg_sptr self) -> demapper_msg"""
        return _mapper_swig.demapper_msg_sptr___deref__(self)

    __swig_destroy__ = _mapper_swig.delete_demapper_msg_sptr
    __del__ = lambda self: None

    def make(self, modtype, symbol_values):
        """make(demapper_msg_sptr self, gr::mapper::modtype_t modtype, std::vector< int,std::allocator< int > > symbol_values) -> demapper_msg_sptr"""
        return _mapper_swig.demapper_msg_sptr_make(self, modtype, symbol_values)


    def history(self):
        """history(demapper_msg_sptr self) -> unsigned int"""
        return _mapper_swig.demapper_msg_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(demapper_msg_sptr self, int which, int delay)
        declare_sample_delay(demapper_msg_sptr self, unsigned int delay)
        """
        return _mapper_swig.demapper_msg_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(demapper_msg_sptr self, int which) -> unsigned int"""
        return _mapper_swig.demapper_msg_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(demapper_msg_sptr self) -> int"""
        return _mapper_swig.demapper_msg_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(demapper_msg_sptr self) -> double"""
        return _mapper_swig.demapper_msg_sptr_relative_rate(self)


    def start(self):
        """start(demapper_msg_sptr self) -> bool"""
        return _mapper_swig.demapper_msg_sptr_start(self)


    def stop(self):
        """stop(demapper_msg_sptr self) -> bool"""
        return _mapper_swig.demapper_msg_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(demapper_msg_sptr self, unsigned int which_input) -> uint64_t"""
        return _mapper_swig.demapper_msg_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(demapper_msg_sptr self, unsigned int which_output) -> uint64_t"""
        return _mapper_swig.demapper_msg_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(demapper_msg_sptr self) -> int"""
        return _mapper_swig.demapper_msg_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(demapper_msg_sptr self, int m)"""
        return _mapper_swig.demapper_msg_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(demapper_msg_sptr self)"""
        return _mapper_swig.demapper_msg_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(demapper_msg_sptr self) -> bool"""
        return _mapper_swig.demapper_msg_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(demapper_msg_sptr self, int m)"""
        return _mapper_swig.demapper_msg_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(demapper_msg_sptr self) -> int"""
        return _mapper_swig.demapper_msg_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(demapper_msg_sptr self, int i) -> long"""
        return _mapper_swig.demapper_msg_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(demapper_msg_sptr self, long max_output_buffer)
        set_max_output_buffer(demapper_msg_sptr self, int port, long max_output_buffer)
        """
        return _mapper_swig.demapper_msg_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(demapper_msg_sptr self, int i) -> long"""
        return _mapper_swig.demapper_msg_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(demapper_msg_sptr self, long min_output_buffer)
        set_min_output_buffer(demapper_msg_sptr self, int port, long min_output_buffer)
        """
        return _mapper_swig.demapper_msg_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(demapper_msg_sptr self) -> float"""
        return _mapper_swig.demapper_msg_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(demapper_msg_sptr self) -> float"""
        return _mapper_swig.demapper_msg_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(demapper_msg_sptr self) -> float"""
        return _mapper_swig.demapper_msg_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(demapper_msg_sptr self) -> float"""
        return _mapper_swig.demapper_msg_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(demapper_msg_sptr self) -> float"""
        return _mapper_swig.demapper_msg_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(demapper_msg_sptr self) -> float"""
        return _mapper_swig.demapper_msg_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(demapper_msg_sptr self, int which) -> float
        pc_input_buffers_full(demapper_msg_sptr self) -> pmt_vector_float
        """
        return _mapper_swig.demapper_msg_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(demapper_msg_sptr self, int which) -> float
        pc_input_buffers_full_avg(demapper_msg_sptr self) -> pmt_vector_float
        """
        return _mapper_swig.demapper_msg_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(demapper_msg_sptr self, int which) -> float
        pc_input_buffers_full_var(demapper_msg_sptr self) -> pmt_vector_float
        """
        return _mapper_swig.demapper_msg_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(demapper_msg_sptr self, int which) -> float
        pc_output_buffers_full(demapper_msg_sptr self) -> pmt_vector_float
        """
        return _mapper_swig.demapper_msg_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(demapper_msg_sptr self, int which) -> float
        pc_output_buffers_full_avg(demapper_msg_sptr self) -> pmt_vector_float
        """
        return _mapper_swig.demapper_msg_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(demapper_msg_sptr self, int which) -> float
        pc_output_buffers_full_var(demapper_msg_sptr self) -> pmt_vector_float
        """
        return _mapper_swig.demapper_msg_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(demapper_msg_sptr self) -> float"""
        return _mapper_swig.demapper_msg_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(demapper_msg_sptr self) -> float"""
        return _mapper_swig.demapper_msg_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(demapper_msg_sptr self) -> float"""
        return _mapper_swig.demapper_msg_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(demapper_msg_sptr self) -> float"""
        return _mapper_swig.demapper_msg_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(demapper_msg_sptr self) -> float"""
        return _mapper_swig.demapper_msg_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(demapper_msg_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _mapper_swig.demapper_msg_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(demapper_msg_sptr self)"""
        return _mapper_swig.demapper_msg_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(demapper_msg_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _mapper_swig.demapper_msg_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(demapper_msg_sptr self) -> int"""
        return _mapper_swig.demapper_msg_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(demapper_msg_sptr self) -> int"""
        return _mapper_swig.demapper_msg_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(demapper_msg_sptr self, int priority) -> int"""
        return _mapper_swig.demapper_msg_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(demapper_msg_sptr self) -> std::string"""
        return _mapper_swig.demapper_msg_sptr_name(self)


    def symbol_name(self):
        """symbol_name(demapper_msg_sptr self) -> std::string"""
        return _mapper_swig.demapper_msg_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(demapper_msg_sptr self) -> io_signature_sptr"""
        return _mapper_swig.demapper_msg_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(demapper_msg_sptr self) -> io_signature_sptr"""
        return _mapper_swig.demapper_msg_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(demapper_msg_sptr self) -> long"""
        return _mapper_swig.demapper_msg_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(demapper_msg_sptr self) -> basic_block_sptr"""
        return _mapper_swig.demapper_msg_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(demapper_msg_sptr self, int ninputs, int noutputs) -> bool"""
        return _mapper_swig.demapper_msg_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(demapper_msg_sptr self) -> std::string"""
        return _mapper_swig.demapper_msg_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(demapper_msg_sptr self, std::string name)"""
        return _mapper_swig.demapper_msg_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(demapper_msg_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _mapper_swig.demapper_msg_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(demapper_msg_sptr self) -> swig_int_ptr"""
        return _mapper_swig.demapper_msg_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(demapper_msg_sptr self) -> swig_int_ptr"""
        return _mapper_swig.demapper_msg_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(demapper_msg_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _mapper_swig.demapper_msg_sptr_message_subscribers(self, which_port)

demapper_msg_sptr_swigregister = _mapper_swig.demapper_msg_sptr_swigregister
demapper_msg_sptr_swigregister(demapper_msg_sptr)


demapper_msg_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
demapper_msg = demapper_msg.make;

class preamble_insert_bb(object):
    """Proxy of C++ gr::mapper::preamble_insert_bb class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def make(width, preamble):
        """make(int width, std::vector< unsigned char,std::allocator< unsigned char > > const & preamble) -> preamble_insert_bb_sptr"""
        return _mapper_swig.preamble_insert_bb_make(width, preamble)

    make = staticmethod(make)

    def rewind(self):
        """rewind(preamble_insert_bb self)"""
        return _mapper_swig.preamble_insert_bb_rewind(self)


    def set_width(self, nw):
        """set_width(preamble_insert_bb self, int nw)"""
        return _mapper_swig.preamble_insert_bb_set_width(self, nw)


    def set_preamble(self, np):
        """set_preamble(preamble_insert_bb self, std::vector< unsigned char,std::allocator< unsigned char > > const & np)"""
        return _mapper_swig.preamble_insert_bb_set_preamble(self, np)

    __swig_destroy__ = _mapper_swig.delete_preamble_insert_bb
    __del__ = lambda self: None
preamble_insert_bb_swigregister = _mapper_swig.preamble_insert_bb_swigregister
preamble_insert_bb_swigregister(preamble_insert_bb)

def preamble_insert_bb_make(width, preamble):
    """preamble_insert_bb_make(int width, std::vector< unsigned char,std::allocator< unsigned char > > const & preamble) -> preamble_insert_bb_sptr"""
    return _mapper_swig.preamble_insert_bb_make(width, preamble)

class preamble_insert_bb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::mapper::preamble_insert_bb)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::mapper::preamble_insert_bb)> self) -> preamble_insert_bb_sptr
        __init__(boost::shared_ptr<(gr::mapper::preamble_insert_bb)> self, preamble_insert_bb p) -> preamble_insert_bb_sptr
        """
        this = _mapper_swig.new_preamble_insert_bb_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(preamble_insert_bb_sptr self) -> preamble_insert_bb"""
        return _mapper_swig.preamble_insert_bb_sptr___deref__(self)

    __swig_destroy__ = _mapper_swig.delete_preamble_insert_bb_sptr
    __del__ = lambda self: None

    def make(self, width, preamble):
        """make(preamble_insert_bb_sptr self, int width, std::vector< unsigned char,std::allocator< unsigned char > > const & preamble) -> preamble_insert_bb_sptr"""
        return _mapper_swig.preamble_insert_bb_sptr_make(self, width, preamble)


    def rewind(self):
        """rewind(preamble_insert_bb_sptr self)"""
        return _mapper_swig.preamble_insert_bb_sptr_rewind(self)


    def set_width(self, nw):
        """set_width(preamble_insert_bb_sptr self, int nw)"""
        return _mapper_swig.preamble_insert_bb_sptr_set_width(self, nw)


    def set_preamble(self, np):
        """set_preamble(preamble_insert_bb_sptr self, std::vector< unsigned char,std::allocator< unsigned char > > const & np)"""
        return _mapper_swig.preamble_insert_bb_sptr_set_preamble(self, np)


    def history(self):
        """history(preamble_insert_bb_sptr self) -> unsigned int"""
        return _mapper_swig.preamble_insert_bb_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(preamble_insert_bb_sptr self, int which, int delay)
        declare_sample_delay(preamble_insert_bb_sptr self, unsigned int delay)
        """
        return _mapper_swig.preamble_insert_bb_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(preamble_insert_bb_sptr self, int which) -> unsigned int"""
        return _mapper_swig.preamble_insert_bb_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(preamble_insert_bb_sptr self) -> int"""
        return _mapper_swig.preamble_insert_bb_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(preamble_insert_bb_sptr self) -> double"""
        return _mapper_swig.preamble_insert_bb_sptr_relative_rate(self)


    def start(self):
        """start(preamble_insert_bb_sptr self) -> bool"""
        return _mapper_swig.preamble_insert_bb_sptr_start(self)


    def stop(self):
        """stop(preamble_insert_bb_sptr self) -> bool"""
        return _mapper_swig.preamble_insert_bb_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(preamble_insert_bb_sptr self, unsigned int which_input) -> uint64_t"""
        return _mapper_swig.preamble_insert_bb_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(preamble_insert_bb_sptr self, unsigned int which_output) -> uint64_t"""
        return _mapper_swig.preamble_insert_bb_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(preamble_insert_bb_sptr self) -> int"""
        return _mapper_swig.preamble_insert_bb_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(preamble_insert_bb_sptr self, int m)"""
        return _mapper_swig.preamble_insert_bb_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(preamble_insert_bb_sptr self)"""
        return _mapper_swig.preamble_insert_bb_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(preamble_insert_bb_sptr self) -> bool"""
        return _mapper_swig.preamble_insert_bb_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(preamble_insert_bb_sptr self, int m)"""
        return _mapper_swig.preamble_insert_bb_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(preamble_insert_bb_sptr self) -> int"""
        return _mapper_swig.preamble_insert_bb_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(preamble_insert_bb_sptr self, int i) -> long"""
        return _mapper_swig.preamble_insert_bb_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(preamble_insert_bb_sptr self, long max_output_buffer)
        set_max_output_buffer(preamble_insert_bb_sptr self, int port, long max_output_buffer)
        """
        return _mapper_swig.preamble_insert_bb_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(preamble_insert_bb_sptr self, int i) -> long"""
        return _mapper_swig.preamble_insert_bb_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(preamble_insert_bb_sptr self, long min_output_buffer)
        set_min_output_buffer(preamble_insert_bb_sptr self, int port, long min_output_buffer)
        """
        return _mapper_swig.preamble_insert_bb_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(preamble_insert_bb_sptr self) -> float"""
        return _mapper_swig.preamble_insert_bb_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(preamble_insert_bb_sptr self) -> float"""
        return _mapper_swig.preamble_insert_bb_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(preamble_insert_bb_sptr self) -> float"""
        return _mapper_swig.preamble_insert_bb_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(preamble_insert_bb_sptr self) -> float"""
        return _mapper_swig.preamble_insert_bb_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(preamble_insert_bb_sptr self) -> float"""
        return _mapper_swig.preamble_insert_bb_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(preamble_insert_bb_sptr self) -> float"""
        return _mapper_swig.preamble_insert_bb_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(preamble_insert_bb_sptr self, int which) -> float
        pc_input_buffers_full(preamble_insert_bb_sptr self) -> pmt_vector_float
        """
        return _mapper_swig.preamble_insert_bb_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(preamble_insert_bb_sptr self, int which) -> float
        pc_input_buffers_full_avg(preamble_insert_bb_sptr self) -> pmt_vector_float
        """
        return _mapper_swig.preamble_insert_bb_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(preamble_insert_bb_sptr self, int which) -> float
        pc_input_buffers_full_var(preamble_insert_bb_sptr self) -> pmt_vector_float
        """
        return _mapper_swig.preamble_insert_bb_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(preamble_insert_bb_sptr self, int which) -> float
        pc_output_buffers_full(preamble_insert_bb_sptr self) -> pmt_vector_float
        """
        return _mapper_swig.preamble_insert_bb_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(preamble_insert_bb_sptr self, int which) -> float
        pc_output_buffers_full_avg(preamble_insert_bb_sptr self) -> pmt_vector_float
        """
        return _mapper_swig.preamble_insert_bb_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(preamble_insert_bb_sptr self, int which) -> float
        pc_output_buffers_full_var(preamble_insert_bb_sptr self) -> pmt_vector_float
        """
        return _mapper_swig.preamble_insert_bb_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(preamble_insert_bb_sptr self) -> float"""
        return _mapper_swig.preamble_insert_bb_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(preamble_insert_bb_sptr self) -> float"""
        return _mapper_swig.preamble_insert_bb_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(preamble_insert_bb_sptr self) -> float"""
        return _mapper_swig.preamble_insert_bb_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(preamble_insert_bb_sptr self) -> float"""
        return _mapper_swig.preamble_insert_bb_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(preamble_insert_bb_sptr self) -> float"""
        return _mapper_swig.preamble_insert_bb_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(preamble_insert_bb_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _mapper_swig.preamble_insert_bb_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(preamble_insert_bb_sptr self)"""
        return _mapper_swig.preamble_insert_bb_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(preamble_insert_bb_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _mapper_swig.preamble_insert_bb_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(preamble_insert_bb_sptr self) -> int"""
        return _mapper_swig.preamble_insert_bb_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(preamble_insert_bb_sptr self) -> int"""
        return _mapper_swig.preamble_insert_bb_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(preamble_insert_bb_sptr self, int priority) -> int"""
        return _mapper_swig.preamble_insert_bb_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(preamble_insert_bb_sptr self) -> std::string"""
        return _mapper_swig.preamble_insert_bb_sptr_name(self)


    def symbol_name(self):
        """symbol_name(preamble_insert_bb_sptr self) -> std::string"""
        return _mapper_swig.preamble_insert_bb_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(preamble_insert_bb_sptr self) -> io_signature_sptr"""
        return _mapper_swig.preamble_insert_bb_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(preamble_insert_bb_sptr self) -> io_signature_sptr"""
        return _mapper_swig.preamble_insert_bb_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(preamble_insert_bb_sptr self) -> long"""
        return _mapper_swig.preamble_insert_bb_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(preamble_insert_bb_sptr self) -> basic_block_sptr"""
        return _mapper_swig.preamble_insert_bb_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(preamble_insert_bb_sptr self, int ninputs, int noutputs) -> bool"""
        return _mapper_swig.preamble_insert_bb_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(preamble_insert_bb_sptr self) -> std::string"""
        return _mapper_swig.preamble_insert_bb_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(preamble_insert_bb_sptr self, std::string name)"""
        return _mapper_swig.preamble_insert_bb_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(preamble_insert_bb_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _mapper_swig.preamble_insert_bb_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(preamble_insert_bb_sptr self) -> swig_int_ptr"""
        return _mapper_swig.preamble_insert_bb_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(preamble_insert_bb_sptr self) -> swig_int_ptr"""
        return _mapper_swig.preamble_insert_bb_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(preamble_insert_bb_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _mapper_swig.preamble_insert_bb_sptr_message_subscribers(self, which_port)

preamble_insert_bb_sptr_swigregister = _mapper_swig.preamble_insert_bb_sptr_swigregister
preamble_insert_bb_sptr_swigregister(preamble_insert_bb_sptr)


preamble_insert_bb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
preamble_insert_bb = preamble_insert_bb.make;

class preamble_sync_cc(object):
    """Proxy of C++ gr::mapper::preamble_sync_cc class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(width, preamble, modtype, symbol_map, garble_thresh_acquire_sync, garble_thresh_loose_sync):
        """make(int width, std::vector< unsigned char,std::allocator< unsigned char > > const & preamble, gr::mapper::modtype_t modtype, std::vector< int,std::allocator< int > > const & symbol_map, float garble_thresh_acquire_sync, float garble_thresh_loose_sync) -> preamble_sync_cc_sptr"""
        return _mapper_swig.preamble_sync_cc_make(width, preamble, modtype, symbol_map, garble_thresh_acquire_sync, garble_thresh_loose_sync)

    make = staticmethod(make)
    __swig_destroy__ = _mapper_swig.delete_preamble_sync_cc
    __del__ = lambda self: None
preamble_sync_cc_swigregister = _mapper_swig.preamble_sync_cc_swigregister
preamble_sync_cc_swigregister(preamble_sync_cc)

def preamble_sync_cc_make(width, preamble, modtype, symbol_map, garble_thresh_acquire_sync, garble_thresh_loose_sync):
    """preamble_sync_cc_make(int width, std::vector< unsigned char,std::allocator< unsigned char > > const & preamble, gr::mapper::modtype_t modtype, std::vector< int,std::allocator< int > > const & symbol_map, float garble_thresh_acquire_sync, float garble_thresh_loose_sync) -> preamble_sync_cc_sptr"""
    return _mapper_swig.preamble_sync_cc_make(width, preamble, modtype, symbol_map, garble_thresh_acquire_sync, garble_thresh_loose_sync)

class preamble_sync_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::mapper::preamble_sync_cc)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::mapper::preamble_sync_cc)> self) -> preamble_sync_cc_sptr
        __init__(boost::shared_ptr<(gr::mapper::preamble_sync_cc)> self, preamble_sync_cc p) -> preamble_sync_cc_sptr
        """
        this = _mapper_swig.new_preamble_sync_cc_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(preamble_sync_cc_sptr self) -> preamble_sync_cc"""
        return _mapper_swig.preamble_sync_cc_sptr___deref__(self)

    __swig_destroy__ = _mapper_swig.delete_preamble_sync_cc_sptr
    __del__ = lambda self: None

    def make(self, width, preamble, modtype, symbol_map, garble_thresh_acquire_sync, garble_thresh_loose_sync):
        """make(preamble_sync_cc_sptr self, int width, std::vector< unsigned char,std::allocator< unsigned char > > const & preamble, gr::mapper::modtype_t modtype, std::vector< int,std::allocator< int > > const & symbol_map, float garble_thresh_acquire_sync, float garble_thresh_loose_sync) -> preamble_sync_cc_sptr"""
        return _mapper_swig.preamble_sync_cc_sptr_make(self, width, preamble, modtype, symbol_map, garble_thresh_acquire_sync, garble_thresh_loose_sync)


    def history(self):
        """history(preamble_sync_cc_sptr self) -> unsigned int"""
        return _mapper_swig.preamble_sync_cc_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(preamble_sync_cc_sptr self, int which, int delay)
        declare_sample_delay(preamble_sync_cc_sptr self, unsigned int delay)
        """
        return _mapper_swig.preamble_sync_cc_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(preamble_sync_cc_sptr self, int which) -> unsigned int"""
        return _mapper_swig.preamble_sync_cc_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(preamble_sync_cc_sptr self) -> int"""
        return _mapper_swig.preamble_sync_cc_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(preamble_sync_cc_sptr self) -> double"""
        return _mapper_swig.preamble_sync_cc_sptr_relative_rate(self)


    def start(self):
        """start(preamble_sync_cc_sptr self) -> bool"""
        return _mapper_swig.preamble_sync_cc_sptr_start(self)


    def stop(self):
        """stop(preamble_sync_cc_sptr self) -> bool"""
        return _mapper_swig.preamble_sync_cc_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(preamble_sync_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _mapper_swig.preamble_sync_cc_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(preamble_sync_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _mapper_swig.preamble_sync_cc_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(preamble_sync_cc_sptr self) -> int"""
        return _mapper_swig.preamble_sync_cc_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(preamble_sync_cc_sptr self, int m)"""
        return _mapper_swig.preamble_sync_cc_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(preamble_sync_cc_sptr self)"""
        return _mapper_swig.preamble_sync_cc_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(preamble_sync_cc_sptr self) -> bool"""
        return _mapper_swig.preamble_sync_cc_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(preamble_sync_cc_sptr self, int m)"""
        return _mapper_swig.preamble_sync_cc_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(preamble_sync_cc_sptr self) -> int"""
        return _mapper_swig.preamble_sync_cc_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(preamble_sync_cc_sptr self, int i) -> long"""
        return _mapper_swig.preamble_sync_cc_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(preamble_sync_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(preamble_sync_cc_sptr self, int port, long max_output_buffer)
        """
        return _mapper_swig.preamble_sync_cc_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(preamble_sync_cc_sptr self, int i) -> long"""
        return _mapper_swig.preamble_sync_cc_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(preamble_sync_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(preamble_sync_cc_sptr self, int port, long min_output_buffer)
        """
        return _mapper_swig.preamble_sync_cc_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(preamble_sync_cc_sptr self) -> float"""
        return _mapper_swig.preamble_sync_cc_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(preamble_sync_cc_sptr self) -> float"""
        return _mapper_swig.preamble_sync_cc_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(preamble_sync_cc_sptr self) -> float"""
        return _mapper_swig.preamble_sync_cc_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(preamble_sync_cc_sptr self) -> float"""
        return _mapper_swig.preamble_sync_cc_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(preamble_sync_cc_sptr self) -> float"""
        return _mapper_swig.preamble_sync_cc_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(preamble_sync_cc_sptr self) -> float"""
        return _mapper_swig.preamble_sync_cc_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(preamble_sync_cc_sptr self, int which) -> float
        pc_input_buffers_full(preamble_sync_cc_sptr self) -> pmt_vector_float
        """
        return _mapper_swig.preamble_sync_cc_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(preamble_sync_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(preamble_sync_cc_sptr self) -> pmt_vector_float
        """
        return _mapper_swig.preamble_sync_cc_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(preamble_sync_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(preamble_sync_cc_sptr self) -> pmt_vector_float
        """
        return _mapper_swig.preamble_sync_cc_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(preamble_sync_cc_sptr self, int which) -> float
        pc_output_buffers_full(preamble_sync_cc_sptr self) -> pmt_vector_float
        """
        return _mapper_swig.preamble_sync_cc_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(preamble_sync_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(preamble_sync_cc_sptr self) -> pmt_vector_float
        """
        return _mapper_swig.preamble_sync_cc_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(preamble_sync_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(preamble_sync_cc_sptr self) -> pmt_vector_float
        """
        return _mapper_swig.preamble_sync_cc_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(preamble_sync_cc_sptr self) -> float"""
        return _mapper_swig.preamble_sync_cc_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(preamble_sync_cc_sptr self) -> float"""
        return _mapper_swig.preamble_sync_cc_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(preamble_sync_cc_sptr self) -> float"""
        return _mapper_swig.preamble_sync_cc_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(preamble_sync_cc_sptr self) -> float"""
        return _mapper_swig.preamble_sync_cc_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(preamble_sync_cc_sptr self) -> float"""
        return _mapper_swig.preamble_sync_cc_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(preamble_sync_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _mapper_swig.preamble_sync_cc_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(preamble_sync_cc_sptr self)"""
        return _mapper_swig.preamble_sync_cc_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(preamble_sync_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _mapper_swig.preamble_sync_cc_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(preamble_sync_cc_sptr self) -> int"""
        return _mapper_swig.preamble_sync_cc_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(preamble_sync_cc_sptr self) -> int"""
        return _mapper_swig.preamble_sync_cc_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(preamble_sync_cc_sptr self, int priority) -> int"""
        return _mapper_swig.preamble_sync_cc_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(preamble_sync_cc_sptr self) -> std::string"""
        return _mapper_swig.preamble_sync_cc_sptr_name(self)


    def symbol_name(self):
        """symbol_name(preamble_sync_cc_sptr self) -> std::string"""
        return _mapper_swig.preamble_sync_cc_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(preamble_sync_cc_sptr self) -> io_signature_sptr"""
        return _mapper_swig.preamble_sync_cc_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(preamble_sync_cc_sptr self) -> io_signature_sptr"""
        return _mapper_swig.preamble_sync_cc_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(preamble_sync_cc_sptr self) -> long"""
        return _mapper_swig.preamble_sync_cc_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(preamble_sync_cc_sptr self) -> basic_block_sptr"""
        return _mapper_swig.preamble_sync_cc_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(preamble_sync_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _mapper_swig.preamble_sync_cc_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(preamble_sync_cc_sptr self) -> std::string"""
        return _mapper_swig.preamble_sync_cc_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(preamble_sync_cc_sptr self, std::string name)"""
        return _mapper_swig.preamble_sync_cc_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(preamble_sync_cc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _mapper_swig.preamble_sync_cc_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(preamble_sync_cc_sptr self) -> swig_int_ptr"""
        return _mapper_swig.preamble_sync_cc_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(preamble_sync_cc_sptr self) -> swig_int_ptr"""
        return _mapper_swig.preamble_sync_cc_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(preamble_sync_cc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _mapper_swig.preamble_sync_cc_sptr_message_subscribers(self, which_port)

preamble_sync_cc_sptr_swigregister = _mapper_swig.preamble_sync_cc_sptr_swigregister
preamble_sync_cc_sptr_swigregister(preamble_sync_cc_sptr)


preamble_sync_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
preamble_sync_cc = preamble_sync_cc.make;

class preamble_sync_demapper(object):
    """Proxy of C++ gr::mapper::preamble_sync_demapper class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(width, preamble, modtype, symbol_map, acquire_bit_thresh, loose_bit_thresh, passthrough):
        """make(int width, std::vector< unsigned char,std::allocator< unsigned char > > const & preamble, gr::mapper::modtype_t modtype, std::vector< int,std::allocator< int > > const & symbol_map, int acquire_bit_thresh, int loose_bit_thresh, bool passthrough) -> preamble_sync_demapper_sptr"""
        return _mapper_swig.preamble_sync_demapper_make(width, preamble, modtype, symbol_map, acquire_bit_thresh, loose_bit_thresh, passthrough)

    make = staticmethod(make)
    __swig_destroy__ = _mapper_swig.delete_preamble_sync_demapper
    __del__ = lambda self: None
preamble_sync_demapper_swigregister = _mapper_swig.preamble_sync_demapper_swigregister
preamble_sync_demapper_swigregister(preamble_sync_demapper)

def preamble_sync_demapper_make(width, preamble, modtype, symbol_map, acquire_bit_thresh, loose_bit_thresh, passthrough):
    """preamble_sync_demapper_make(int width, std::vector< unsigned char,std::allocator< unsigned char > > const & preamble, gr::mapper::modtype_t modtype, std::vector< int,std::allocator< int > > const & symbol_map, int acquire_bit_thresh, int loose_bit_thresh, bool passthrough) -> preamble_sync_demapper_sptr"""
    return _mapper_swig.preamble_sync_demapper_make(width, preamble, modtype, symbol_map, acquire_bit_thresh, loose_bit_thresh, passthrough)

class preamble_sync_demapper_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::mapper::preamble_sync_demapper)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::mapper::preamble_sync_demapper)> self) -> preamble_sync_demapper_sptr
        __init__(boost::shared_ptr<(gr::mapper::preamble_sync_demapper)> self, preamble_sync_demapper p) -> preamble_sync_demapper_sptr
        """
        this = _mapper_swig.new_preamble_sync_demapper_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(preamble_sync_demapper_sptr self) -> preamble_sync_demapper"""
        return _mapper_swig.preamble_sync_demapper_sptr___deref__(self)

    __swig_destroy__ = _mapper_swig.delete_preamble_sync_demapper_sptr
    __del__ = lambda self: None

    def make(self, width, preamble, modtype, symbol_map, acquire_bit_thresh, loose_bit_thresh, passthrough):
        """make(preamble_sync_demapper_sptr self, int width, std::vector< unsigned char,std::allocator< unsigned char > > const & preamble, gr::mapper::modtype_t modtype, std::vector< int,std::allocator< int > > const & symbol_map, int acquire_bit_thresh, int loose_bit_thresh, bool passthrough) -> preamble_sync_demapper_sptr"""
        return _mapper_swig.preamble_sync_demapper_sptr_make(self, width, preamble, modtype, symbol_map, acquire_bit_thresh, loose_bit_thresh, passthrough)


    def history(self):
        """history(preamble_sync_demapper_sptr self) -> unsigned int"""
        return _mapper_swig.preamble_sync_demapper_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(preamble_sync_demapper_sptr self, int which, int delay)
        declare_sample_delay(preamble_sync_demapper_sptr self, unsigned int delay)
        """
        return _mapper_swig.preamble_sync_demapper_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(preamble_sync_demapper_sptr self, int which) -> unsigned int"""
        return _mapper_swig.preamble_sync_demapper_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(preamble_sync_demapper_sptr self) -> int"""
        return _mapper_swig.preamble_sync_demapper_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(preamble_sync_demapper_sptr self) -> double"""
        return _mapper_swig.preamble_sync_demapper_sptr_relative_rate(self)


    def start(self):
        """start(preamble_sync_demapper_sptr self) -> bool"""
        return _mapper_swig.preamble_sync_demapper_sptr_start(self)


    def stop(self):
        """stop(preamble_sync_demapper_sptr self) -> bool"""
        return _mapper_swig.preamble_sync_demapper_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(preamble_sync_demapper_sptr self, unsigned int which_input) -> uint64_t"""
        return _mapper_swig.preamble_sync_demapper_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(preamble_sync_demapper_sptr self, unsigned int which_output) -> uint64_t"""
        return _mapper_swig.preamble_sync_demapper_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(preamble_sync_demapper_sptr self) -> int"""
        return _mapper_swig.preamble_sync_demapper_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(preamble_sync_demapper_sptr self, int m)"""
        return _mapper_swig.preamble_sync_demapper_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(preamble_sync_demapper_sptr self)"""
        return _mapper_swig.preamble_sync_demapper_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(preamble_sync_demapper_sptr self) -> bool"""
        return _mapper_swig.preamble_sync_demapper_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(preamble_sync_demapper_sptr self, int m)"""
        return _mapper_swig.preamble_sync_demapper_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(preamble_sync_demapper_sptr self) -> int"""
        return _mapper_swig.preamble_sync_demapper_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(preamble_sync_demapper_sptr self, int i) -> long"""
        return _mapper_swig.preamble_sync_demapper_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(preamble_sync_demapper_sptr self, long max_output_buffer)
        set_max_output_buffer(preamble_sync_demapper_sptr self, int port, long max_output_buffer)
        """
        return _mapper_swig.preamble_sync_demapper_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(preamble_sync_demapper_sptr self, int i) -> long"""
        return _mapper_swig.preamble_sync_demapper_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(preamble_sync_demapper_sptr self, long min_output_buffer)
        set_min_output_buffer(preamble_sync_demapper_sptr self, int port, long min_output_buffer)
        """
        return _mapper_swig.preamble_sync_demapper_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(preamble_sync_demapper_sptr self) -> float"""
        return _mapper_swig.preamble_sync_demapper_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(preamble_sync_demapper_sptr self) -> float"""
        return _mapper_swig.preamble_sync_demapper_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(preamble_sync_demapper_sptr self) -> float"""
        return _mapper_swig.preamble_sync_demapper_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(preamble_sync_demapper_sptr self) -> float"""
        return _mapper_swig.preamble_sync_demapper_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(preamble_sync_demapper_sptr self) -> float"""
        return _mapper_swig.preamble_sync_demapper_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(preamble_sync_demapper_sptr self) -> float"""
        return _mapper_swig.preamble_sync_demapper_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(preamble_sync_demapper_sptr self, int which) -> float
        pc_input_buffers_full(preamble_sync_demapper_sptr self) -> pmt_vector_float
        """
        return _mapper_swig.preamble_sync_demapper_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(preamble_sync_demapper_sptr self, int which) -> float
        pc_input_buffers_full_avg(preamble_sync_demapper_sptr self) -> pmt_vector_float
        """
        return _mapper_swig.preamble_sync_demapper_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(preamble_sync_demapper_sptr self, int which) -> float
        pc_input_buffers_full_var(preamble_sync_demapper_sptr self) -> pmt_vector_float
        """
        return _mapper_swig.preamble_sync_demapper_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(preamble_sync_demapper_sptr self, int which) -> float
        pc_output_buffers_full(preamble_sync_demapper_sptr self) -> pmt_vector_float
        """
        return _mapper_swig.preamble_sync_demapper_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(preamble_sync_demapper_sptr self, int which) -> float
        pc_output_buffers_full_avg(preamble_sync_demapper_sptr self) -> pmt_vector_float
        """
        return _mapper_swig.preamble_sync_demapper_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(preamble_sync_demapper_sptr self, int which) -> float
        pc_output_buffers_full_var(preamble_sync_demapper_sptr self) -> pmt_vector_float
        """
        return _mapper_swig.preamble_sync_demapper_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(preamble_sync_demapper_sptr self) -> float"""
        return _mapper_swig.preamble_sync_demapper_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(preamble_sync_demapper_sptr self) -> float"""
        return _mapper_swig.preamble_sync_demapper_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(preamble_sync_demapper_sptr self) -> float"""
        return _mapper_swig.preamble_sync_demapper_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(preamble_sync_demapper_sptr self) -> float"""
        return _mapper_swig.preamble_sync_demapper_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(preamble_sync_demapper_sptr self) -> float"""
        return _mapper_swig.preamble_sync_demapper_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(preamble_sync_demapper_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _mapper_swig.preamble_sync_demapper_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(preamble_sync_demapper_sptr self)"""
        return _mapper_swig.preamble_sync_demapper_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(preamble_sync_demapper_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _mapper_swig.preamble_sync_demapper_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(preamble_sync_demapper_sptr self) -> int"""
        return _mapper_swig.preamble_sync_demapper_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(preamble_sync_demapper_sptr self) -> int"""
        return _mapper_swig.preamble_sync_demapper_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(preamble_sync_demapper_sptr self, int priority) -> int"""
        return _mapper_swig.preamble_sync_demapper_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(preamble_sync_demapper_sptr self) -> std::string"""
        return _mapper_swig.preamble_sync_demapper_sptr_name(self)


    def symbol_name(self):
        """symbol_name(preamble_sync_demapper_sptr self) -> std::string"""
        return _mapper_swig.preamble_sync_demapper_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(preamble_sync_demapper_sptr self) -> io_signature_sptr"""
        return _mapper_swig.preamble_sync_demapper_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(preamble_sync_demapper_sptr self) -> io_signature_sptr"""
        return _mapper_swig.preamble_sync_demapper_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(preamble_sync_demapper_sptr self) -> long"""
        return _mapper_swig.preamble_sync_demapper_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(preamble_sync_demapper_sptr self) -> basic_block_sptr"""
        return _mapper_swig.preamble_sync_demapper_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(preamble_sync_demapper_sptr self, int ninputs, int noutputs) -> bool"""
        return _mapper_swig.preamble_sync_demapper_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(preamble_sync_demapper_sptr self) -> std::string"""
        return _mapper_swig.preamble_sync_demapper_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(preamble_sync_demapper_sptr self, std::string name)"""
        return _mapper_swig.preamble_sync_demapper_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(preamble_sync_demapper_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _mapper_swig.preamble_sync_demapper_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(preamble_sync_demapper_sptr self) -> swig_int_ptr"""
        return _mapper_swig.preamble_sync_demapper_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(preamble_sync_demapper_sptr self) -> swig_int_ptr"""
        return _mapper_swig.preamble_sync_demapper_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(preamble_sync_demapper_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _mapper_swig.preamble_sync_demapper_sptr_message_subscribers(self, which_port)

preamble_sync_demapper_sptr_swigregister = _mapper_swig.preamble_sync_demapper_sptr_swigregister
preamble_sync_demapper_sptr_swigregister(preamble_sync_demapper_sptr)


preamble_sync_demapper_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
preamble_sync_demapper = preamble_sync_demapper.make;

class preamble_sync_demapper_hard(object):
    """Proxy of C++ gr::mapper::preamble_sync_demapper_hard class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(width, preamble, modtype, symbol_map, acquire_bit_thresh, loose_bit_thresh, passthrough):
        """make(int width, std::vector< unsigned char,std::allocator< unsigned char > > const & preamble, gr::mapper::modtype_t modtype, std::vector< int,std::allocator< int > > const & symbol_map, int acquire_bit_thresh, int loose_bit_thresh, bool passthrough) -> preamble_sync_demapper_hard_sptr"""
        return _mapper_swig.preamble_sync_demapper_hard_make(width, preamble, modtype, symbol_map, acquire_bit_thresh, loose_bit_thresh, passthrough)

    make = staticmethod(make)
    __swig_destroy__ = _mapper_swig.delete_preamble_sync_demapper_hard
    __del__ = lambda self: None
preamble_sync_demapper_hard_swigregister = _mapper_swig.preamble_sync_demapper_hard_swigregister
preamble_sync_demapper_hard_swigregister(preamble_sync_demapper_hard)

def preamble_sync_demapper_hard_make(width, preamble, modtype, symbol_map, acquire_bit_thresh, loose_bit_thresh, passthrough):
    """preamble_sync_demapper_hard_make(int width, std::vector< unsigned char,std::allocator< unsigned char > > const & preamble, gr::mapper::modtype_t modtype, std::vector< int,std::allocator< int > > const & symbol_map, int acquire_bit_thresh, int loose_bit_thresh, bool passthrough) -> preamble_sync_demapper_hard_sptr"""
    return _mapper_swig.preamble_sync_demapper_hard_make(width, preamble, modtype, symbol_map, acquire_bit_thresh, loose_bit_thresh, passthrough)

class preamble_sync_demapper_hard_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::mapper::preamble_sync_demapper_hard)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::mapper::preamble_sync_demapper_hard)> self) -> preamble_sync_demapper_hard_sptr
        __init__(boost::shared_ptr<(gr::mapper::preamble_sync_demapper_hard)> self, preamble_sync_demapper_hard p) -> preamble_sync_demapper_hard_sptr
        """
        this = _mapper_swig.new_preamble_sync_demapper_hard_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(preamble_sync_demapper_hard_sptr self) -> preamble_sync_demapper_hard"""
        return _mapper_swig.preamble_sync_demapper_hard_sptr___deref__(self)

    __swig_destroy__ = _mapper_swig.delete_preamble_sync_demapper_hard_sptr
    __del__ = lambda self: None

    def make(self, width, preamble, modtype, symbol_map, acquire_bit_thresh, loose_bit_thresh, passthrough):
        """make(preamble_sync_demapper_hard_sptr self, int width, std::vector< unsigned char,std::allocator< unsigned char > > const & preamble, gr::mapper::modtype_t modtype, std::vector< int,std::allocator< int > > const & symbol_map, int acquire_bit_thresh, int loose_bit_thresh, bool passthrough) -> preamble_sync_demapper_hard_sptr"""
        return _mapper_swig.preamble_sync_demapper_hard_sptr_make(self, width, preamble, modtype, symbol_map, acquire_bit_thresh, loose_bit_thresh, passthrough)


    def history(self):
        """history(preamble_sync_demapper_hard_sptr self) -> unsigned int"""
        return _mapper_swig.preamble_sync_demapper_hard_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(preamble_sync_demapper_hard_sptr self, int which, int delay)
        declare_sample_delay(preamble_sync_demapper_hard_sptr self, unsigned int delay)
        """
        return _mapper_swig.preamble_sync_demapper_hard_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(preamble_sync_demapper_hard_sptr self, int which) -> unsigned int"""
        return _mapper_swig.preamble_sync_demapper_hard_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(preamble_sync_demapper_hard_sptr self) -> int"""
        return _mapper_swig.preamble_sync_demapper_hard_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(preamble_sync_demapper_hard_sptr self) -> double"""
        return _mapper_swig.preamble_sync_demapper_hard_sptr_relative_rate(self)


    def start(self):
        """start(preamble_sync_demapper_hard_sptr self) -> bool"""
        return _mapper_swig.preamble_sync_demapper_hard_sptr_start(self)


    def stop(self):
        """stop(preamble_sync_demapper_hard_sptr self) -> bool"""
        return _mapper_swig.preamble_sync_demapper_hard_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(preamble_sync_demapper_hard_sptr self, unsigned int which_input) -> uint64_t"""
        return _mapper_swig.preamble_sync_demapper_hard_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(preamble_sync_demapper_hard_sptr self, unsigned int which_output) -> uint64_t"""
        return _mapper_swig.preamble_sync_demapper_hard_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(preamble_sync_demapper_hard_sptr self) -> int"""
        return _mapper_swig.preamble_sync_demapper_hard_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(preamble_sync_demapper_hard_sptr self, int m)"""
        return _mapper_swig.preamble_sync_demapper_hard_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(preamble_sync_demapper_hard_sptr self)"""
        return _mapper_swig.preamble_sync_demapper_hard_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(preamble_sync_demapper_hard_sptr self) -> bool"""
        return _mapper_swig.preamble_sync_demapper_hard_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(preamble_sync_demapper_hard_sptr self, int m)"""
        return _mapper_swig.preamble_sync_demapper_hard_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(preamble_sync_demapper_hard_sptr self) -> int"""
        return _mapper_swig.preamble_sync_demapper_hard_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(preamble_sync_demapper_hard_sptr self, int i) -> long"""
        return _mapper_swig.preamble_sync_demapper_hard_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(preamble_sync_demapper_hard_sptr self, long max_output_buffer)
        set_max_output_buffer(preamble_sync_demapper_hard_sptr self, int port, long max_output_buffer)
        """
        return _mapper_swig.preamble_sync_demapper_hard_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(preamble_sync_demapper_hard_sptr self, int i) -> long"""
        return _mapper_swig.preamble_sync_demapper_hard_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(preamble_sync_demapper_hard_sptr self, long min_output_buffer)
        set_min_output_buffer(preamble_sync_demapper_hard_sptr self, int port, long min_output_buffer)
        """
        return _mapper_swig.preamble_sync_demapper_hard_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(preamble_sync_demapper_hard_sptr self) -> float"""
        return _mapper_swig.preamble_sync_demapper_hard_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(preamble_sync_demapper_hard_sptr self) -> float"""
        return _mapper_swig.preamble_sync_demapper_hard_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(preamble_sync_demapper_hard_sptr self) -> float"""
        return _mapper_swig.preamble_sync_demapper_hard_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(preamble_sync_demapper_hard_sptr self) -> float"""
        return _mapper_swig.preamble_sync_demapper_hard_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(preamble_sync_demapper_hard_sptr self) -> float"""
        return _mapper_swig.preamble_sync_demapper_hard_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(preamble_sync_demapper_hard_sptr self) -> float"""
        return _mapper_swig.preamble_sync_demapper_hard_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(preamble_sync_demapper_hard_sptr self, int which) -> float
        pc_input_buffers_full(preamble_sync_demapper_hard_sptr self) -> pmt_vector_float
        """
        return _mapper_swig.preamble_sync_demapper_hard_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(preamble_sync_demapper_hard_sptr self, int which) -> float
        pc_input_buffers_full_avg(preamble_sync_demapper_hard_sptr self) -> pmt_vector_float
        """
        return _mapper_swig.preamble_sync_demapper_hard_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(preamble_sync_demapper_hard_sptr self, int which) -> float
        pc_input_buffers_full_var(preamble_sync_demapper_hard_sptr self) -> pmt_vector_float
        """
        return _mapper_swig.preamble_sync_demapper_hard_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(preamble_sync_demapper_hard_sptr self, int which) -> float
        pc_output_buffers_full(preamble_sync_demapper_hard_sptr self) -> pmt_vector_float
        """
        return _mapper_swig.preamble_sync_demapper_hard_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(preamble_sync_demapper_hard_sptr self, int which) -> float
        pc_output_buffers_full_avg(preamble_sync_demapper_hard_sptr self) -> pmt_vector_float
        """
        return _mapper_swig.preamble_sync_demapper_hard_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(preamble_sync_demapper_hard_sptr self, int which) -> float
        pc_output_buffers_full_var(preamble_sync_demapper_hard_sptr self) -> pmt_vector_float
        """
        return _mapper_swig.preamble_sync_demapper_hard_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(preamble_sync_demapper_hard_sptr self) -> float"""
        return _mapper_swig.preamble_sync_demapper_hard_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(preamble_sync_demapper_hard_sptr self) -> float"""
        return _mapper_swig.preamble_sync_demapper_hard_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(preamble_sync_demapper_hard_sptr self) -> float"""
        return _mapper_swig.preamble_sync_demapper_hard_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(preamble_sync_demapper_hard_sptr self) -> float"""
        return _mapper_swig.preamble_sync_demapper_hard_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(preamble_sync_demapper_hard_sptr self) -> float"""
        return _mapper_swig.preamble_sync_demapper_hard_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(preamble_sync_demapper_hard_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _mapper_swig.preamble_sync_demapper_hard_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(preamble_sync_demapper_hard_sptr self)"""
        return _mapper_swig.preamble_sync_demapper_hard_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(preamble_sync_demapper_hard_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _mapper_swig.preamble_sync_demapper_hard_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(preamble_sync_demapper_hard_sptr self) -> int"""
        return _mapper_swig.preamble_sync_demapper_hard_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(preamble_sync_demapper_hard_sptr self) -> int"""
        return _mapper_swig.preamble_sync_demapper_hard_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(preamble_sync_demapper_hard_sptr self, int priority) -> int"""
        return _mapper_swig.preamble_sync_demapper_hard_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(preamble_sync_demapper_hard_sptr self) -> std::string"""
        return _mapper_swig.preamble_sync_demapper_hard_sptr_name(self)


    def symbol_name(self):
        """symbol_name(preamble_sync_demapper_hard_sptr self) -> std::string"""
        return _mapper_swig.preamble_sync_demapper_hard_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(preamble_sync_demapper_hard_sptr self) -> io_signature_sptr"""
        return _mapper_swig.preamble_sync_demapper_hard_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(preamble_sync_demapper_hard_sptr self) -> io_signature_sptr"""
        return _mapper_swig.preamble_sync_demapper_hard_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(preamble_sync_demapper_hard_sptr self) -> long"""
        return _mapper_swig.preamble_sync_demapper_hard_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(preamble_sync_demapper_hard_sptr self) -> basic_block_sptr"""
        return _mapper_swig.preamble_sync_demapper_hard_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(preamble_sync_demapper_hard_sptr self, int ninputs, int noutputs) -> bool"""
        return _mapper_swig.preamble_sync_demapper_hard_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(preamble_sync_demapper_hard_sptr self) -> std::string"""
        return _mapper_swig.preamble_sync_demapper_hard_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(preamble_sync_demapper_hard_sptr self, std::string name)"""
        return _mapper_swig.preamble_sync_demapper_hard_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(preamble_sync_demapper_hard_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _mapper_swig.preamble_sync_demapper_hard_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(preamble_sync_demapper_hard_sptr self) -> swig_int_ptr"""
        return _mapper_swig.preamble_sync_demapper_hard_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(preamble_sync_demapper_hard_sptr self) -> swig_int_ptr"""
        return _mapper_swig.preamble_sync_demapper_hard_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(preamble_sync_demapper_hard_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _mapper_swig.preamble_sync_demapper_hard_sptr_message_subscribers(self, which_port)

preamble_sync_demapper_hard_sptr_swigregister = _mapper_swig.preamble_sync_demapper_hard_sptr_swigregister
preamble_sync_demapper_hard_sptr_swigregister(preamble_sync_demapper_hard_sptr)


preamble_sync_demapper_hard_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
preamble_sync_demapper_hard = preamble_sync_demapper_hard.make;

class preamble_strip(object):
    """Proxy of C++ gr::mapper::preamble_strip class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(user_len, preamble):
        """make(int user_len, std::vector< uint8_t,std::allocator< uint8_t > > const & preamble) -> preamble_strip_sptr"""
        return _mapper_swig.preamble_strip_make(user_len, preamble)

    make = staticmethod(make)
    __swig_destroy__ = _mapper_swig.delete_preamble_strip
    __del__ = lambda self: None
preamble_strip_swigregister = _mapper_swig.preamble_strip_swigregister
preamble_strip_swigregister(preamble_strip)

def preamble_strip_make(user_len, preamble):
    """preamble_strip_make(int user_len, std::vector< uint8_t,std::allocator< uint8_t > > const & preamble) -> preamble_strip_sptr"""
    return _mapper_swig.preamble_strip_make(user_len, preamble)

class preamble_strip_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::mapper::preamble_strip)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::mapper::preamble_strip)> self) -> preamble_strip_sptr
        __init__(boost::shared_ptr<(gr::mapper::preamble_strip)> self, preamble_strip p) -> preamble_strip_sptr
        """
        this = _mapper_swig.new_preamble_strip_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(preamble_strip_sptr self) -> preamble_strip"""
        return _mapper_swig.preamble_strip_sptr___deref__(self)

    __swig_destroy__ = _mapper_swig.delete_preamble_strip_sptr
    __del__ = lambda self: None

    def make(self, user_len, preamble):
        """make(preamble_strip_sptr self, int user_len, std::vector< uint8_t,std::allocator< uint8_t > > const & preamble) -> preamble_strip_sptr"""
        return _mapper_swig.preamble_strip_sptr_make(self, user_len, preamble)


    def history(self):
        """history(preamble_strip_sptr self) -> unsigned int"""
        return _mapper_swig.preamble_strip_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(preamble_strip_sptr self, int which, int delay)
        declare_sample_delay(preamble_strip_sptr self, unsigned int delay)
        """
        return _mapper_swig.preamble_strip_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(preamble_strip_sptr self, int which) -> unsigned int"""
        return _mapper_swig.preamble_strip_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(preamble_strip_sptr self) -> int"""
        return _mapper_swig.preamble_strip_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(preamble_strip_sptr self) -> double"""
        return _mapper_swig.preamble_strip_sptr_relative_rate(self)


    def start(self):
        """start(preamble_strip_sptr self) -> bool"""
        return _mapper_swig.preamble_strip_sptr_start(self)


    def stop(self):
        """stop(preamble_strip_sptr self) -> bool"""
        return _mapper_swig.preamble_strip_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(preamble_strip_sptr self, unsigned int which_input) -> uint64_t"""
        return _mapper_swig.preamble_strip_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(preamble_strip_sptr self, unsigned int which_output) -> uint64_t"""
        return _mapper_swig.preamble_strip_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(preamble_strip_sptr self) -> int"""
        return _mapper_swig.preamble_strip_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(preamble_strip_sptr self, int m)"""
        return _mapper_swig.preamble_strip_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(preamble_strip_sptr self)"""
        return _mapper_swig.preamble_strip_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(preamble_strip_sptr self) -> bool"""
        return _mapper_swig.preamble_strip_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(preamble_strip_sptr self, int m)"""
        return _mapper_swig.preamble_strip_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(preamble_strip_sptr self) -> int"""
        return _mapper_swig.preamble_strip_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(preamble_strip_sptr self, int i) -> long"""
        return _mapper_swig.preamble_strip_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(preamble_strip_sptr self, long max_output_buffer)
        set_max_output_buffer(preamble_strip_sptr self, int port, long max_output_buffer)
        """
        return _mapper_swig.preamble_strip_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(preamble_strip_sptr self, int i) -> long"""
        return _mapper_swig.preamble_strip_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(preamble_strip_sptr self, long min_output_buffer)
        set_min_output_buffer(preamble_strip_sptr self, int port, long min_output_buffer)
        """
        return _mapper_swig.preamble_strip_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(preamble_strip_sptr self) -> float"""
        return _mapper_swig.preamble_strip_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(preamble_strip_sptr self) -> float"""
        return _mapper_swig.preamble_strip_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(preamble_strip_sptr self) -> float"""
        return _mapper_swig.preamble_strip_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(preamble_strip_sptr self) -> float"""
        return _mapper_swig.preamble_strip_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(preamble_strip_sptr self) -> float"""
        return _mapper_swig.preamble_strip_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(preamble_strip_sptr self) -> float"""
        return _mapper_swig.preamble_strip_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(preamble_strip_sptr self, int which) -> float
        pc_input_buffers_full(preamble_strip_sptr self) -> pmt_vector_float
        """
        return _mapper_swig.preamble_strip_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(preamble_strip_sptr self, int which) -> float
        pc_input_buffers_full_avg(preamble_strip_sptr self) -> pmt_vector_float
        """
        return _mapper_swig.preamble_strip_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(preamble_strip_sptr self, int which) -> float
        pc_input_buffers_full_var(preamble_strip_sptr self) -> pmt_vector_float
        """
        return _mapper_swig.preamble_strip_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(preamble_strip_sptr self, int which) -> float
        pc_output_buffers_full(preamble_strip_sptr self) -> pmt_vector_float
        """
        return _mapper_swig.preamble_strip_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(preamble_strip_sptr self, int which) -> float
        pc_output_buffers_full_avg(preamble_strip_sptr self) -> pmt_vector_float
        """
        return _mapper_swig.preamble_strip_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(preamble_strip_sptr self, int which) -> float
        pc_output_buffers_full_var(preamble_strip_sptr self) -> pmt_vector_float
        """
        return _mapper_swig.preamble_strip_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(preamble_strip_sptr self) -> float"""
        return _mapper_swig.preamble_strip_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(preamble_strip_sptr self) -> float"""
        return _mapper_swig.preamble_strip_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(preamble_strip_sptr self) -> float"""
        return _mapper_swig.preamble_strip_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(preamble_strip_sptr self) -> float"""
        return _mapper_swig.preamble_strip_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(preamble_strip_sptr self) -> float"""
        return _mapper_swig.preamble_strip_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(preamble_strip_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _mapper_swig.preamble_strip_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(preamble_strip_sptr self)"""
        return _mapper_swig.preamble_strip_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(preamble_strip_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _mapper_swig.preamble_strip_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(preamble_strip_sptr self) -> int"""
        return _mapper_swig.preamble_strip_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(preamble_strip_sptr self) -> int"""
        return _mapper_swig.preamble_strip_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(preamble_strip_sptr self, int priority) -> int"""
        return _mapper_swig.preamble_strip_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(preamble_strip_sptr self) -> std::string"""
        return _mapper_swig.preamble_strip_sptr_name(self)


    def symbol_name(self):
        """symbol_name(preamble_strip_sptr self) -> std::string"""
        return _mapper_swig.preamble_strip_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(preamble_strip_sptr self) -> io_signature_sptr"""
        return _mapper_swig.preamble_strip_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(preamble_strip_sptr self) -> io_signature_sptr"""
        return _mapper_swig.preamble_strip_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(preamble_strip_sptr self) -> long"""
        return _mapper_swig.preamble_strip_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(preamble_strip_sptr self) -> basic_block_sptr"""
        return _mapper_swig.preamble_strip_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(preamble_strip_sptr self, int ninputs, int noutputs) -> bool"""
        return _mapper_swig.preamble_strip_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(preamble_strip_sptr self) -> std::string"""
        return _mapper_swig.preamble_strip_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(preamble_strip_sptr self, std::string name)"""
        return _mapper_swig.preamble_strip_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(preamble_strip_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _mapper_swig.preamble_strip_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(preamble_strip_sptr self) -> swig_int_ptr"""
        return _mapper_swig.preamble_strip_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(preamble_strip_sptr self) -> swig_int_ptr"""
        return _mapper_swig.preamble_strip_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(preamble_strip_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _mapper_swig.preamble_strip_sptr_message_subscribers(self, which_port)

preamble_strip_sptr_swigregister = _mapper_swig.preamble_strip_sptr_swigregister
preamble_strip_sptr_swigregister(preamble_strip_sptr)


preamble_strip_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
preamble_strip = preamble_strip.make;

class timeslot_demux(object):
    """Proxy of C++ gr::mapper::timeslot_demux class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(nusers, syncd, ts_id, ts_len):
        """make(int nusers, bool syncd, std::vector< uint8_t,std::allocator< uint8_t > > const & ts_id, int ts_len) -> timeslot_demux_sptr"""
        return _mapper_swig.timeslot_demux_make(nusers, syncd, ts_id, ts_len)

    make = staticmethod(make)
    __swig_destroy__ = _mapper_swig.delete_timeslot_demux
    __del__ = lambda self: None
timeslot_demux_swigregister = _mapper_swig.timeslot_demux_swigregister
timeslot_demux_swigregister(timeslot_demux)

def timeslot_demux_make(nusers, syncd, ts_id, ts_len):
    """timeslot_demux_make(int nusers, bool syncd, std::vector< uint8_t,std::allocator< uint8_t > > const & ts_id, int ts_len) -> timeslot_demux_sptr"""
    return _mapper_swig.timeslot_demux_make(nusers, syncd, ts_id, ts_len)

class timeslot_demux_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::mapper::timeslot_demux)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::mapper::timeslot_demux)> self) -> timeslot_demux_sptr
        __init__(boost::shared_ptr<(gr::mapper::timeslot_demux)> self, timeslot_demux p) -> timeslot_demux_sptr
        """
        this = _mapper_swig.new_timeslot_demux_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(timeslot_demux_sptr self) -> timeslot_demux"""
        return _mapper_swig.timeslot_demux_sptr___deref__(self)

    __swig_destroy__ = _mapper_swig.delete_timeslot_demux_sptr
    __del__ = lambda self: None

    def make(self, nusers, syncd, ts_id, ts_len):
        """make(timeslot_demux_sptr self, int nusers, bool syncd, std::vector< uint8_t,std::allocator< uint8_t > > const & ts_id, int ts_len) -> timeslot_demux_sptr"""
        return _mapper_swig.timeslot_demux_sptr_make(self, nusers, syncd, ts_id, ts_len)


    def history(self):
        """history(timeslot_demux_sptr self) -> unsigned int"""
        return _mapper_swig.timeslot_demux_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(timeslot_demux_sptr self, int which, int delay)
        declare_sample_delay(timeslot_demux_sptr self, unsigned int delay)
        """
        return _mapper_swig.timeslot_demux_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(timeslot_demux_sptr self, int which) -> unsigned int"""
        return _mapper_swig.timeslot_demux_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(timeslot_demux_sptr self) -> int"""
        return _mapper_swig.timeslot_demux_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(timeslot_demux_sptr self) -> double"""
        return _mapper_swig.timeslot_demux_sptr_relative_rate(self)


    def start(self):
        """start(timeslot_demux_sptr self) -> bool"""
        return _mapper_swig.timeslot_demux_sptr_start(self)


    def stop(self):
        """stop(timeslot_demux_sptr self) -> bool"""
        return _mapper_swig.timeslot_demux_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(timeslot_demux_sptr self, unsigned int which_input) -> uint64_t"""
        return _mapper_swig.timeslot_demux_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(timeslot_demux_sptr self, unsigned int which_output) -> uint64_t"""
        return _mapper_swig.timeslot_demux_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(timeslot_demux_sptr self) -> int"""
        return _mapper_swig.timeslot_demux_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(timeslot_demux_sptr self, int m)"""
        return _mapper_swig.timeslot_demux_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(timeslot_demux_sptr self)"""
        return _mapper_swig.timeslot_demux_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(timeslot_demux_sptr self) -> bool"""
        return _mapper_swig.timeslot_demux_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(timeslot_demux_sptr self, int m)"""
        return _mapper_swig.timeslot_demux_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(timeslot_demux_sptr self) -> int"""
        return _mapper_swig.timeslot_demux_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(timeslot_demux_sptr self, int i) -> long"""
        return _mapper_swig.timeslot_demux_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(timeslot_demux_sptr self, long max_output_buffer)
        set_max_output_buffer(timeslot_demux_sptr self, int port, long max_output_buffer)
        """
        return _mapper_swig.timeslot_demux_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(timeslot_demux_sptr self, int i) -> long"""
        return _mapper_swig.timeslot_demux_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(timeslot_demux_sptr self, long min_output_buffer)
        set_min_output_buffer(timeslot_demux_sptr self, int port, long min_output_buffer)
        """
        return _mapper_swig.timeslot_demux_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(timeslot_demux_sptr self) -> float"""
        return _mapper_swig.timeslot_demux_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(timeslot_demux_sptr self) -> float"""
        return _mapper_swig.timeslot_demux_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(timeslot_demux_sptr self) -> float"""
        return _mapper_swig.timeslot_demux_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(timeslot_demux_sptr self) -> float"""
        return _mapper_swig.timeslot_demux_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(timeslot_demux_sptr self) -> float"""
        return _mapper_swig.timeslot_demux_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(timeslot_demux_sptr self) -> float"""
        return _mapper_swig.timeslot_demux_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(timeslot_demux_sptr self, int which) -> float
        pc_input_buffers_full(timeslot_demux_sptr self) -> pmt_vector_float
        """
        return _mapper_swig.timeslot_demux_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(timeslot_demux_sptr self, int which) -> float
        pc_input_buffers_full_avg(timeslot_demux_sptr self) -> pmt_vector_float
        """
        return _mapper_swig.timeslot_demux_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(timeslot_demux_sptr self, int which) -> float
        pc_input_buffers_full_var(timeslot_demux_sptr self) -> pmt_vector_float
        """
        return _mapper_swig.timeslot_demux_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(timeslot_demux_sptr self, int which) -> float
        pc_output_buffers_full(timeslot_demux_sptr self) -> pmt_vector_float
        """
        return _mapper_swig.timeslot_demux_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(timeslot_demux_sptr self, int which) -> float
        pc_output_buffers_full_avg(timeslot_demux_sptr self) -> pmt_vector_float
        """
        return _mapper_swig.timeslot_demux_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(timeslot_demux_sptr self, int which) -> float
        pc_output_buffers_full_var(timeslot_demux_sptr self) -> pmt_vector_float
        """
        return _mapper_swig.timeslot_demux_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(timeslot_demux_sptr self) -> float"""
        return _mapper_swig.timeslot_demux_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(timeslot_demux_sptr self) -> float"""
        return _mapper_swig.timeslot_demux_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(timeslot_demux_sptr self) -> float"""
        return _mapper_swig.timeslot_demux_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(timeslot_demux_sptr self) -> float"""
        return _mapper_swig.timeslot_demux_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(timeslot_demux_sptr self) -> float"""
        return _mapper_swig.timeslot_demux_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(timeslot_demux_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _mapper_swig.timeslot_demux_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(timeslot_demux_sptr self)"""
        return _mapper_swig.timeslot_demux_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(timeslot_demux_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _mapper_swig.timeslot_demux_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(timeslot_demux_sptr self) -> int"""
        return _mapper_swig.timeslot_demux_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(timeslot_demux_sptr self) -> int"""
        return _mapper_swig.timeslot_demux_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(timeslot_demux_sptr self, int priority) -> int"""
        return _mapper_swig.timeslot_demux_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(timeslot_demux_sptr self) -> std::string"""
        return _mapper_swig.timeslot_demux_sptr_name(self)


    def symbol_name(self):
        """symbol_name(timeslot_demux_sptr self) -> std::string"""
        return _mapper_swig.timeslot_demux_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(timeslot_demux_sptr self) -> io_signature_sptr"""
        return _mapper_swig.timeslot_demux_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(timeslot_demux_sptr self) -> io_signature_sptr"""
        return _mapper_swig.timeslot_demux_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(timeslot_demux_sptr self) -> long"""
        return _mapper_swig.timeslot_demux_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(timeslot_demux_sptr self) -> basic_block_sptr"""
        return _mapper_swig.timeslot_demux_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(timeslot_demux_sptr self, int ninputs, int noutputs) -> bool"""
        return _mapper_swig.timeslot_demux_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(timeslot_demux_sptr self) -> std::string"""
        return _mapper_swig.timeslot_demux_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(timeslot_demux_sptr self, std::string name)"""
        return _mapper_swig.timeslot_demux_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(timeslot_demux_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _mapper_swig.timeslot_demux_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(timeslot_demux_sptr self) -> swig_int_ptr"""
        return _mapper_swig.timeslot_demux_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(timeslot_demux_sptr self) -> swig_int_ptr"""
        return _mapper_swig.timeslot_demux_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(timeslot_demux_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _mapper_swig.timeslot_demux_sptr_message_subscribers(self, which_port)

timeslot_demux_sptr_swigregister = _mapper_swig.timeslot_demux_sptr_swigregister
timeslot_demux_sptr_swigregister(timeslot_demux_sptr)


timeslot_demux_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
timeslot_demux = timeslot_demux.make;



