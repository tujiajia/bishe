<?xml version="1.0"?>
<block>
  <name>Decode using Preamble Synch</name>
  <key>mapper_preamble_sync_demapper_hard</key>
  <category>mapper</category>
  <import>import mapper</import>
  <make>mapper.preamble_sync_demapper_hard($width, $preamble, $modtype, $symbol_map, $acquire_bit_thresh, $loose_bit_thresh, $passthrough)</make>

  <param>
    <name>Width</name>
    <key>width</key>
    <type>int</type>
  </param>
  <param>
    <name>Preamble</name>
    <key>preamble</key>
    <type>int_vector</type>
  </param>
  <param>
    <name>Modulaton</name>
    <key>modtype</key>
    <type>enum</type>
    <option>
        <name>BPSK</name>
        <key>mapper.BPSK</key>
    </option>
    <option>
        <name>Pi/2BPSK</name>
        <key>mapper.P2BPSK</key>
    </option>
    <option>
        <name>QPSK</name>
        <key>mapper.QPSK</key>
    </option>
    <option>
        <name>8PSK</name>
        <key>mapper.PSK8</key>
    </option>
  </param>
  <param>
    <name>Symbol Values</name>
    <key>symbol_map</key>
    <value>[0,1]</value>
    <type>int_vector</type>
  </param>
  <param>
    <name>Bits for Acquire Trigger</name>
    <key>acquire_bit_thresh</key>
    <value>0</value>
    <type>int</type>
  </param>
  <param>
    <name>Bits for Loose Trigger</name>
    <key>loose_bit_thresh</key>
    <value>3</value>
    <type>int</type>
  </param>
  <param>
    <name>Preamble Pass-through</name>
    <key>passthrough</key>
    <type>enum</type>
      <option>
        <name>Yes</name>
        <key>True</key>
      </option>
      <option>
        <name>No</name>
        <key>False</key>
      </option>
  </param>

  <sink>
    <name>in</name>
    <type>complex</type>
  </sink>

  <source>
    <name>out</name>
    <type>byte</type>
  </source>

  <doc>
      Assumes there is only 1 sample per symbol

      Bits for Acquire Trigger - # of bits that are wrong for this condition to be met (0 means exact preamble found)
      Bits for Loose Trigger - # of bits that are wrong for this condition to be met (3 bits wrong)
      Width - # of bits in each block including the length of the preamble
      Preamble - Create a variable in grc that uses the built in Preamble_Gen function (see below)
        
        pream_len = 84
        preamble = (mapper.preamble_generator(pream_len,511,1033)).get_preamble()
                                             (length,  seed, mask)
  </doc>

</block>
